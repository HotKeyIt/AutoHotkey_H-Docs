<!DOCTYPE HTML>
<html>
<head>
<title>Control Functions</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Control Functions</h1>

<p>Functions to retrieve information about a control, or make a variety of changes to a control.</p>
<pre>
<em>; General (all control types):</em>
Boolean := <a href="#GetEnabled">ControlGetEnabled</a>(...)
           <a href="#SetEnabled">ControlSetEnabled</a>(TrueFalseToggle, ...)
Boolean := <a href="#GetVisible">ControlGetVisible</a>(...)
           <a href="#Hide">ControlHide</a>(...)
           <a href="#Show">ControlShow</a>(...)
Integer := <a href="#GetHwnd">ControlGetHwnd</a>(...)
Integer := <a href="#GetStyle">ControlGetStyle</a>(...)
           <a href="#SetStyle">ControlSetStyle</a>(Value, ...)
Integer := <a href="#GetStyle">ControlGetExStyle</a>(...)
           <a href="#SetStyle">ControlSetExStyle</a>(Value, ...)

<em>; Edit:</em>
Integer := <a href="#GetCurrentCol">ControlGetCurrentCol</a>(...)
Integer := <a href="#GetCurrentLine">ControlGetCurrentLine</a>(...)
Integer := <a href="#GetLineCount">ControlGetLineCount</a>(...)
String  := <a href="#GetLine">ControlGetLine</a>(Index, ...)
String  := <a href="#GetSelected">ControlGetSelected</a>(...)
           <a href="#EditPaste">ControlEditPaste</a>(String, ...)

<em>; Checkbox and radio buttons:</em>
Boolean := <a href="#GetChecked">ControlGetChecked</a>(...)
           <a href="#SetChecked">ControlSetChecked</a>(TrueFalseToggle, ...)

<em>; ListBox and ComboBox:</em>
String  := <a href="#GetChoice">ControlGetChoice</a>(...)
           <a href="#Choose">ControlChoose</a>(Index, ...)
           <a href="#ChooseString">ControlChooseString</a>(String, ...)
Index   := <a href="#AddItem">ControlAddItem</a>(String, ...)
           <a href="#DeleteItem">ControlDeleteItem</a>(Index, ...)
Index   := <a href="#FindItem">ControlFindItem</a>(String, ...)

<em>; ListView, ListBox and ComboBox:</em>
String  := <a href="#GetList">ControlGetList</a>(Options, ...)

<em>; ComboBox:</em>
           <a href="#ShowDropDown">ControlShowDropDown</a>(...)
           <a href="#HideDropDown">ControlHideDropDown</a>(...)

<em>; Tab (SysTabControl32):</em>
Integer := <a href="#GetTab">ControlGetTab</a>(...)
           <a href="#SetTab">ControlSetTab</a>(N, ...)
</pre>
<p>Replace <code>...</code> with the <a href="#standard-parameters">standard optional parameters</a>:<br>
<code>Control, WinTitle, WinText, ExcludeTitle, ExcludeText</code></p>

<h2>All Controls</h2>

<h3 id="GetEnabled">ControlGetEnabled</h3>
<p>Returns 1 (true) if <em>Control</em> is enabled, or 0 (false) if disabled.</p>
<pre class="Syntax"><span class="func">ControlGetEnabled</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="SetEnabled">ControlSetEnabled</h3>
<p>Enables or disables a control.</p>
<pre class="Syntax"><span class="func">ControlSetEnabled</span> Value <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Value</dt>
  <dd><p>One of the following case-insensitive strings or numbers:<br>
    <code>ON</code> or <code>1</code> (<a href="../Variables.htm#True">true</a>) turns on the setting.<br>
    <code>OFF</code> or <code>0</code> (<a href="../Variables.htm#False">false</a>) turns off the setting.<br>
    <code>TOGGLE</code> or <code>-1</code> sets it to the opposite of its current state.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="GetVisible">ControlGetVisible</h3>
<p>Returns 1 (true) if <em>Control</em> is visible, or 0 (false) if hidden.</p>
<pre class="Syntax"><span class="func">ControlGetVisible</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="Hide">ControlHide</h3>
<p>Hides a control. If you additionally want to prevent a control's shortcut key (underlined letter) from working, disable the control via <a href="#SetEnabled">ControlSetEnabled</a>.</p>
<pre class="Syntax"><span class="func">ControlHide</span> <span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="Show">ControlShow</h3>
<p>Shows a control if it was previously hidden.</p>
<pre class="Syntax"><span class="func">ControlShow</span> <span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="GetHwnd">ControlGetHwnd</h3>
<p>Retrieves the window handle (HWND) of the specified control.</p>
<pre class="Syntax"><span class="func">ControlGetHwnd</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>For example: <code>editHwnd := ControlGetHwnd("Edit1", WinTitle)</code>.</p>
<p>A control's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. On a related note, a control's HWND can also be retrieved via <a href="MouseGetPos.htm">MouseGetPos</a>. Finally, a control's HWND can be used directly as an <a href="../misc/WinTitle.htm#ahk_id">ahk_id WinTitle</a> (this also works on hidden controls even when <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is Off).</p>

<h3 id="GetStyle">ControlGetStyle / ControlGetExStyle</h3>
<p>Retrieves an integer representing the style or extended style of the control.</p>
<pre class="Syntax"><span class="func">ControlGetStyle</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)
<span class="func">ControlGetExStyle</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>See the <a href="../misc/Styles.htm">styles table</a> for a listing of some styles.</p>

<h3 id="SetStyle">ControlSetStyle / ControlSetExStyle</h3>
<p>Changes the style or extended style of a control, respectively.</p>
<pre class="Syntax"><span class="func">ControlSetStyle</span> Value <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>
<span class="func">ControlSetExStyle</span> Value <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Value</dt>
  <dd>
  <p>Pass a positive integer to completely overwrite the window's style; that is, to set it to <em>Value</em>.</p>
  <p>To easily add, remove or toggle styles, pass a numeric string prefixed with a plus sign (+), minus sign (-) or caret (^), respectively. The new style value is calculated as shown below (where CurrentStyle could be retrieved with <a href="#GetStyle">ControlGetStyle/ControlGetExStyle</a> or <a href="WinGet.htm#Style">WinGetStyle/WinGetExStyle</a>):</p>
  <table class="info">
    <tr>
      <th>Operation</th>
      <th>Prefix</th>
      <th>Example String</th>
      <th>Formula</th>
    </tr>
    <tr>
      <td>Add</td>
      <td>+</td>
      <td>+0x80</td>
      <td><code>NewStyle := CurrentStyle | Value</code></td>
    </tr>
    <tr>
      <td>Remove</td>
      <td>-</td>
      <td>-0x80</td>
      <td><code>NewStyle := CurrentStyle &amp; ~Value</code></td>
    </tr>
    <tr>
      <td>Toggle</td>
      <td>^</td>
      <td>^0x80</td>
      <td><code>NewStyle := CurrentStyle ^ Value</code></td>
    </tr>
  </table>
  <p>If <em>Value</em> is a negative integer, it is treated the same as the corresponding numeric string.</p>
  <p>To use the + or ^ prefix literally in an expression, the prefix or value must be enclosed in quote marks. For example: <code>WinSetStyle("+0x80")</code> or <code>WinSetStyle("^" StylesToToggle)</code>. This is because the <a href="../Variables.htm#Expressions">expression</a> <code><a href="../Variables.htm#unary">+123</a></code> produces 123 (without a prefix) and <code>^123</code> is a syntax error.</p>
  </dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1 if the target window/control is not found or the style is not allowed to be applied.</p>
<p>Certain style changes require that the entire window be redrawn using <a href="WinSet.htm#Redraw">WinRedraw</a>. Also, the <a href="../misc/Styles.htm">styles table</a> lists some of the style numbers. For example:</p>
<pre>ControlSetStyle("^0x800000", "Edit1", "WinTitle")  <em>; Set the WS_BORDER style to its opposite state.</em></pre>

<h2>CheckBox and Radio Buttons</h2>

<h3 id="GetChecked">ControlGetChecked</h3>
<p>Returns 1 (true) if the checkbox or radio button is checked or 0 (false) if not.</p>
<pre class="Syntax"><span class="func">ControlGetChecked</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="SetChecked">ControlSetChecked</h3>
<p>Turns on (checks) or turns off (unchecks) a radio button or checkbox.</p>
<pre class="Syntax"><span class="func">ControlSetChecked</span> Value <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Value</dt>
  <dd><p>One of the following case-insensitive strings or numbers:<br>
    <code>ON</code> or <code>1</code> (<a href="../Variables.htm#True">true</a>) turns on the setting.<br>
    <code>OFF</code> or <code>0</code> (<a href="../Variables.htm#False">false</a>) turns off the setting.<br>
    <code>TOGGLE</code> or <code>-1</code> sets it to the opposite of its current state.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h2>Edit</h2>

<h3 id="GetCurrentCol">ControlGetCurrentCol</h3>
<p>Returns the column number in an Edit control where the caret (text insertion point) resides.</p>
<pre class="Syntax"><span class="func">ControlGetCurrentCol</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>The first column is 1. If there is text selected in the control, the return value is the column number where the selection begins.</p>

<h3 id="GetCurrentLine">ControlGetCurrentLine</h3>
<p>Returns the line number in an Edit control where the caret (insert point) resides.</p>
<pre class="Syntax"><span class="func">ControlGetCurrentLine</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>The first line is 1. If there is text selected in the control, the return value is the line number where the selection begins.</p>

<h3 id="GetLineCount">ControlGetLineCount</h3>
<p>Returns the number of lines in an Edit control.</p>
<pre class="Syntax"><span class="func">ControlGetLineCount</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>All Edit controls have at least 1 line, even if the control is empty.</p>

<h3 id="GetLine">ControlGetLine</h3>
<p>Returns the text of line <em>N</em> in an Edit control.</p>
<pre class="Syntax"><span class="func">ControlGetLine</span>(N <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>N</dt>
  <dd><p>The line number. Line 1 is the first line.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>Depending on the nature of the control, the return value might end in a carriage return (`r) or a carriage return + linefeed (`r`n).</p>
<p>An <a href="Catch.htm#RuntimeErrors">exception</a> is thrown if <em>N</em> negative or not a number.</p>
<p>For example: <code>line1 := ControlGetLine(1, "Edit1", "ahk_class Notepad")</code></p>

<h3 id="GetSelected">ControlGetSelected</h3>
<p>Returns the selected text in an Edit control.</p>
<pre class="Syntax"><span class="func">ControlGetSelected</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>If no text is selected, an empty string is returned and ErrorLevel is set to 0 (i.e. no error). Certain types of controls, such as RichEdit20A, might not produce the correct text in some cases (e.g. Metapad).</p>

<h3 id="EditPaste">ControlEditPaste</h3>
<p>Pastes <em>String</em> at the caret/insert position in an Edit control.</p>
<pre class="Syntax"><span class="func">ControlEditPaste</span> String <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>String</dt>
  <dd><p>The string to paste.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>The effect is similar to pasting by pressing Ctrl+V, but this function does not affect the contents of the <a href="../misc/Clipboard.htm">clipboard</a> or require the control to have the keyboard focus.</p>

<h2>ListBox and ComboBox</h2>

<h3 id="GetChoice">ControlGetChoice</h3>
<p>Returns the name of the currently selected entry in a ListBox or ComboBox.</p>
<pre class="Syntax"><span class="func">ControlGetChoice</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>To instead retrieve the position of the selected item, follow this example (use only one of the first two lines):</p>
<pre>ChoicePos := <a href="PostMessage.htm">SendMessage</a>(0x188, 0, 0, "ListBox1", WinTitle)  <em>; 0x188 is LB_GETCURSEL (for a ListBox).</em>
ChoicePos := <a href="PostMessage.htm">SendMessage</a>(0x147, 0, 0, "ComboBox1", WinTitle)  <em>; 0x147 is CB_GETCURSEL (for a DropDownList or ComboBox).</em>
ChoicePos += 1  <em>; Convert from 0-based to 1-based, i.e. so that the first item is known as 1, not 0.
; ChoicePos is now 0 if there is no item selected.</em></pre>

<h3 id="Choose">ControlChoose</h3>
<p>Sets the selection in a ListBox or ComboBox to be the Nth entry. <em>N</em> should be 1 for the first entry, 2 for the second, etc. </p>
<pre class="Syntax"><span class="func">ControlChoose</span> N <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>N</dt>
  <dd><p>The index of the item, where 1 is the first entry, 2 is the second, etc.</p>
    <p>To deselect all items, specify 0.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>To select all items in a <em>multi-select</em> listbox, follow this example:</p>
<pre><a href="PostMessage.htm">PostMessage</a>, 0x185, 1, -1, ListBox1, WinTitle  <em>; Select all listbox items. 0x185 is LB_SETSEL.</em></pre>

<h3 id="ChooseString">ControlChooseString</h3>
<p>Sets the selection in a ListBox or ComboBox to be the first entry whose leading part matches <em>String</em>.</p>
<pre class="Syntax"><span class="func">ControlChooseString</span> String <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>String</dt>
  <dd><p>The string to choose (see above). The search is not case sensitive. For example, if a ListBox/ComboBox contains the item "UNIX Text", specifying the word "unix" (lowercase) would be enough to select it.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>Returns the index of the chosen item, where 1 is the first item, 2 is the second, etc. If an error occurred, the return value is blank and <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1.</p>

<h3 id="AddItem">ControlAddItem</h3>
<p>Adds <em>String</em> as a new entry at the bottom of a ListBox or ComboBox.</p>
<pre class="Syntax">N := <span class="func">ControlAddItem</span>(String <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>Returns the index of the new item, where 1 is the first item, 2 is the second, etc. If an error occurred, the return value is blank and <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1.</p>

<h3 id="DeleteItem">ControlDeleteItem</h3>
<p>Deletes the Nth entry from a ListBox or ComboBox.</p>
<pre class="Syntax"><span class="func">ControlDeleteItem</span> N <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>N</dt>
  <dd><p>The index of the item, where 1 is the first entry, 2 is the second, etc.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h3 id="FindItem">ControlFindItem</h3>
<p>Returns the entry number of a ListBox or ComboBox that is a complete match for <em>String</em>.</p>
<pre class="Syntax"><span class="func">ControlFindItem</span> String <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>String</dt>
  <dd><p>The string to find. The search is case-insensitive. Unlike <a href="Control.htm#ChooseString">ControlChooseString</a>, the entry's entire text must match, not just the leading part.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>The first entry in the control is 1, the second 2, and so on. If no match is found, the return value is blank and ErrorLevel is set to 1.</p>

<h2>ListView, ListBox and ComboBox</h2>

<h3 id="GetList">ControlGetList</h3>
<p>Retrieves a list of items from a ListView, ListBox, ComboBox, or DropDownList.</p>
<pre class="Syntax"><span class="func">ControlGetList</span>(<span class="optional">Options, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Options</dt>
  <dd><p>Specifices what to retrieve if the control is a ListView (see below). For other control types, <em>Options</em> should be blank/empty.</p></dd>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h4 id="ListView">ListView</h4>
<p>If the <em>Options</em> parameter is blank or omitted, all the text in the control is retrieved. Each row except the last will end with a linefeed character (`n). Within each row, each field (column) except the last will end with a tab character (`t).</p>
<p>Specify for <em>Options</em> zero or more of the following words, each separated from the next with a space or tab:</p>
<p><em>Selected</em>: Retrieves only the selected (highlighted) rows rather than all rows. If none, the return value is blank.<br>
  <em>Focused</em>: Retrieves only the focused row. If none, the return value is blank.<br>
  <em id="ColN">Col4</em>: Retrieves only the fourth column (field) rather than all columns (replace 4 with a number of your choice).  <br>
  <em>Count</em>: Retrieves a single number that is the total number of rows in the control.<br>
  <em>Count Selected</em>: Retrieves the number of selected (highlighted) rows.<br>
  <em>Count Focused</em>: Retrieves the row number (position) of the focused row (0 if none).<br>
<em>Count Col</em>: Retrieves the number of columns in the control (or -1 if the count cannot be determined).</p>
<p>NOTE: Some applications store their ListView text privately, which prevents their text from being retrieved. In these cases, ErrorLevel will usually be set to 0 (indicating success) but all the retrieved fields will be empty.</p>
<p>Upon success, ErrorLevel is set to 0. Upon failure, it is set to 1 and the return value is blank. Failure occurs when: 1) the target window or control does not exist; 2) the target control is not of type SysListView32; 3) the process owning the ListView could not be opened, perhaps due to a lack of user permissions or because it is locked; 4) the <a href="#ColN">Col<em>N</em> option</a> specifies a nonexistent column.</p>
<p>To extract the individual rows and fields out of a ListView, use a <a href="LoopParse.htm">parsing loop</a> as in this example:</p>
<pre>List := ControlGetList("Selected", "SysListView321", WinTitle)
Loop, Parse, %List%, `n  <em>; Rows are delimited by linefeeds (`n).</em>
{
    RowNumber := A_Index
    Loop, Parse, %A_LoopField%, %A_Tab%  <em>; Fields (columns) in each row are delimited by tabs (A_Tab).</em>
        MsgBox("Row #" RowNumber " Col #" A_Index " is " A_LoopField ".")
}</pre>
<p>On a related note, the columns in a ListView can be resized via <a href="PostMessage.htm">SendMessage</a> as shown in this example:</p>
<pre>SendMessage(4126, 0, 80, "SysListView321", WinTitle)  <em>; 4126 is the message LVM_SETCOLUMNWIDTH.
; In the above, 0 indicates the first column (specify 1 for the second, 2 for the third, etc.)  Also, 80 is the new width.
; Replace 80 with -1 to autosize the column. Replace it with -2 to do the same but also take into account the header text width.</em></pre>

<h4>ListBox and ComboBox (includes DropDownList)</h4>
<p>All the text is retrieved from the control (that is, the ListView options above such as <em>Count</em> and <em>Selected</em> are not supported).</p>
<p>Each row except the last will be terminated by a linefeed character (`n). To access the items individually, use a <a href="LoopParse.htm">parsing loop</a> as in this example:</p>
<pre>List := ControlGetList("", "ComboBox1", WinTitle)
Loop, Parse, %List%, `n
    MsgBox("Item number " A_Index " is " A_LoopField ".")</pre>

<h2>ComboBox</h2>

<h3 id="ShowDropDown">ControlShowDropDown</h3>
<p>Drops a ComboBox so that its choices become visible.</p>
<pre class="Syntax"><span class="func">ControlShowDropDown</span> <span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>Example:</p>
<pre>Send("#r")  <em>; Display the Run dialog.</em>
WinWaitActive("ahk_class #32770")  <em>; Wait for the dialog to appear.</em>
ControlShowDropDown("ComboBox1")  <em>; Show the DropDown list. The forth parameter is omitted so that the last found window is used.</em>
Sleep(2000)		
ControlHideDropDown("ComboBox1")  <em>; Hide the DropDown list.</em>
Sleep(1000)		
Send("{Esc}")  <em>; Hide the dialog window.</em></pre>

<h3 id="HideDropDown">ControlHideDropDown</h3>
<p>Reverses the above.</p>
<pre class="Syntax"><span class="func">ControlHideDropDown</span> <span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h2>Tab</h2>

<h3 id="GetTab">ControlGetTab</h3>
<p>Returns the position number of the selected tab in a SysTabControl32.</p>
<pre class="Syntax"><span class="func">ControlGetTab</span>(<span class="optional">Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>
<p>The first tab is 1, the second is 2, etc. If no tab is selected (rare), the return value is 0.</p>
<p>To instead discover how many tabs (pages) exist in a tab control, follow this example:</p>
<pre>TabCount := <a href="PostMessage.htm">SendMessage</a>(0x1304,,, "SysTabControl321", WinTitle)  <em>; 0x1304 is TCM_GETITEMCOUNT.</em></pre>
<p>Example:</p>
<pre>WhichTab := ControlGetTab("SysTabControl321", "Some Window Title")
if ErrorLevel
    MsgBox("There was a problem.")
else
    MsgBox("Tab #" WhichTab " is active.")</pre>

<h3 id="SetTab">ControlSetTab</h3>
<p>Selects the Nth tab in a SysTabControl32.</p>
<pre class="Syntax"><span class="func">ControlSetTab</span> N <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<dl>
  <dt>Control, WinTitle, etc.</dt>
  <dd><p>See <a href="#standard-parameters">Standard Parameters</a>.</p></dd>
</dl>

<h2>General</h2>

<h3 id="standard-parameters">Standard Parameters</h3>
<p>All of the functions on this page utilize the following parameters to identify the target control and window:</p>
<dl>
  <dt>Control</dt>
  <dd><p>Can be either ClassNN (the classname and instance number of the control) or the control's text, both of which can be determined via Window Spy. When using text, the matching behavior is determined by <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>. If this parameter is blank, the target window's topmost control will be used.</p>
    <p>To operate upon a control's HWND (window handle), leave the <em>Control</em> parameter blank and specify <code>"ahk_id " ControlHwnd</code> for the <em>WinTitle</em> parameter (this also works on hidden controls even when <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is Off). The HWND of a control is typically retrieved via <a href="Control.htm#GetHwnd">ControlGetHwnd</a>, <a href="MouseGetPos.htm">MouseGetPos</a>, or <a href="DllCall.htm">DllCall</a>.</p></dd>
  <dt>WinTitle</dt>
  <dd><p>A window title or other criteria identifying the target window. See <a href="../misc/WinTitle.htm">WinTitle</a>.</p></dd>
  <dt>WinText</dt>
  <dd><p>If present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if <a href="DetectHiddenText.htm">DetectHiddenText</a> is ON.</p></dd>
  <dt>ExcludeTitle</dt>
  <dd><p>Windows whose titles include this value will not be considered.</p></dd>
  <dt>ExcludeText</dt>
  <dd><p>Windows whose text include this value will not be considered.</p></dd>
</dl>

<h3>ErrorLevel</h3>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 1 if there was a problem or 0 otherwise. Unless specified otherwise, each function also returns 1 (true) to indicate success or 0 (false) to indicate failure.</p>
<p>An <a href="Catch.htm#RuntimeErrors">exception</a> is thrown if invalid parameters are detected.</p>

<h3>Remarks</h3>
<p>To improve reliability, a delay is done automatically after each use of a Control function that changes a control (except for <em>ControlSetStyle</em> and <em>ControlSetExStyle</em>). That delay can be changed via <a href="SetControlDelay.htm">SetControlDelay</a> or by assigning a value to <a href="../Variables.htm#ControlDelay">A_ControlDelay</a>. For details, see <a href="SetControlDelay.htm#Remarks">SetControlDelay remarks</a>.</p>
<p>To discover the ClassNN or HWND of the control that the mouse is currently hovering over, use <a href="MouseGetPos.htm">MouseGetPos</a>.</p>
<p>Window titles and text are case sensitive. Hidden windows are not detected unless <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> has been turned on.</p>

<h3>Related</h3>
<p><a href="SetControlDelay.htm">SetControlDelay</a>, <a href="WinSet.htm">WinSet functions</a>, <a href="WinGet.htm">WinGet functions</a>, <a href="../objects/GuiControl.htm">GuiControl object</a> (for controls created by the script)</p>
<p>Other Control functions: <a href="ControlGetFocus.htm">ControlGetFocus</a>, <a href="ControlFocus.htm">ControlFocus</a>, <a href="ControlGetPos.htm">ControlGetPos</a>, <a href="ControlMove.htm">ControlMove</a>, <a href="ControlGetText.htm">ControlGetText</a>, <a href="ControlSetText.htm">ControlSetText</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="ControlSend.htm">ControlSend</a></p>

</body>
</html>
