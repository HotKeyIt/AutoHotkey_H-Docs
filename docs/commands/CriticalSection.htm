<!DOCTYPE HTML> 
<html><head><title>CriticalSection()</title>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />


<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>CriticalSection</h1>
<p>Included function to create and initialize a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682530.aspx">Critical Section Object</a>.</p>
<br>
<pre class="Syntax"><b>OutputVar</b> := <span class="func">CriticalSection</span>()
<pre><em>Function Example:</em> <b>CriSec</b> := CriticalSection()</pre></pre>

<h3>Parameters</h3>
<dl>
  <dt><b>OutputVar</b></dt>
    <dd><p>The name of the variable in which to store the pointer to the Critical Section Object.</p>
    </dd>
</dl>
<dl>
<h3>General Remarks</h3>
<dd>
<p>A critical section object is useful in a multi-threaded environment (<a href="../../AutoHotkeyDll.htm">AutoHotkey.dll</a>).<br>Critical Section Object provides synchronization similar to that provided by a mutex object but is used only by the threads of single process.<br>When Critical Section is owned by one thread and another thread tries to take ownership it will be halted and only continue once the thread released ownership.<br>To take ownership call <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682608.aspx">EnterCriticalSection(CriSec)</a>, to release ownership call <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684169.aspx">LeaveCriticalSection(CriSec)</a>. You can also call <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686857.aspx">TryEnterCriticalSection(CriSec)</a> if you don't want to lock current thread so it can still process messages, use Hotkeys, Timers...</p>
</dd>
</dl>
<h3>Related</h3>
<p><a href="CriticalObject.htm">CriticalObject</a>, <a href="../../AutoHotkeyDll.htm">AutoHotkey.dll</a></p>
    <h3>Examples</h3>
    <h3>Example #1</h3>
    <a class="ver" title="Applies to: AutoHotkey_H v2.0-a100 and later">[v2.0-a100+]</a> Synchronizes 2 threads, running in parallel, to take turns in displaying message boxes.
    <pre class="NoIndent">
CriSec := <b>CriticalSection</b>() <em>; Create and retrieve a pointer to a Critical Section Object.</em>

threadScript := "
(
    CriSec := A_Args[1] <em>; The first command line argument is a pointer to a Critical Section Object.</em>

    Loop 5
    {
        <b>EnterCriticalSection</b>(CriSec) <em>; Take ownership or wait until you can.</em>
        MsgBox("Critical Section is now owned by AutoHotkey.dll")
        <b>LeaveCriticalSection</b>(CriSec) <em>; Release ownership.</em>

        <em>; Allow some time for other threads to take ownership of the Critical Section.</em>
        <em>; Failure to do so may leave some threads <a href="https://en.wikipedia.org/wiki/Starvation_(computer_science)">starved</a>.</em>
        Sleep(10)
    }
)"

<em>; Create and start a thread using AutoHotkey.dll
; Command line arguments can only be passed as a string.
; To convert the pointer (an integer), concatenate with an empty string.</em>
AhkDllThread := <a href="AhkThread.htm">AhkThread</a>(threadScript, CriSec . "")

<em>; Instructions executed by the main script thread.</em>
Loop 5
{
    <b>EnterCriticalSection</b>(CriSec)
    MsgBox("Critical Section is now owned by AutoHotkey.exe")
    <b>LeaveCriticalSection</b>(CriSec)
    Sleep(10)
}</pre>
    <h3>Example #2</h3>
    <a class="ver" title="Applies to: AutoHotkey_H v2.0-a100 and later">[v2.0-a100+]</a> Same as <a href="#Example_1">Example #1</a>, except without any delays. The threads execute their instructions as fast as possible. Whichever thread manages to take ownership of a Critical Section first is likely to keep reacquiring ownership until the thread finishes. Meanwhile as a result, any other threads trying to take ownership by means of <code>EnterCriticalSection</code> will be left in a blocking wait state and <a href="https://en.wikipedia.org/wiki/Starvation_(computer_science)">starve</a>.
    <pre class="NoIndent">
CriSec := <b>CriticalSection</b>()

<em>; Create and start a thread using AutoHotkey.dll</em>
AhkDllThread := <a href="AhkThread.htm">AhkThread</a>("
(
    CriSec := A_Args[1]

    Loop 5
    {
        <b>EnterCriticalSection</b>(CriSec)
        MsgBox("Critical Section is now owned by AutoHotkey.dll")
        <b>LeaveCriticalSection</b>(CriSec)

        <em>; The thread releases ownership and retakes it as soon as possible, leaving no time for other threads to run.
        ; Despite having called <b>EnterCriticalSection</b>, other threads will remain blocked, waiting.</em>
    }
)", CriSec . "")

<em>; It is very likely that by this point the AhkDllThread has already been created, started,
; has taken ownership of the Critical Section and the first of five message boxes is currently showing.</em>

Loop 5
{
    <em>; On the first iteration of the loop, the main script thread tries to take ownership.
    ; It can't because the AhkDllThread already has ownership.
    ; The main thread will now block until the AhkDllThread has released its ownership.
    ; In reality, the main thread will have to wait until the AhkDllThread has finished
    ; because there won't be enough time to perform a context switch.</em>
    <b>EnterCriticalSection</b>(CriSec)

    MsgBox("Critical Section is now owned by AutoHotkey.exe")
    <b>LeaveCriticalSection</b>(CriSec)
}

<em>; Very rarely will this exact same scenario play out the other way around.</em>
    </pre>
</body></html>