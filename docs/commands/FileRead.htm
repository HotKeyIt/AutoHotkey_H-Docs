<!DOCTYPE HTML>
<html>
<head>
<title>FileRead()</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>Reads a file's contents into a <a href="../Variables.htm">variable</a>.</p>
<pre class="Syntax"><b>OutputVar</b> := <span class="func">FileRead</span>(Filename)<pre><em>Function Example:</em> <b>file</b> := FileRead(A_ScriptDir "\MyFile.txt")</pre></pre>

<h3>Parameters</h3>
<dl>

  <dt>Filename</dt>
  <dd><p>The name of the file to read, which is assumed to be in <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> if an absolute path isn't specified.</p>
  </dd>
  
  <dt>Options</dt>
  <dd><p>Zero or more of the following strings. Separate each option from the next with a single space or tab. For example: <code>"`n m5000 UTF-8"</code></p>
    <p><strong>Encoding</strong>: Specify any of the encoding names accepted by <a href="FileEncoding.htm">FileEncoding</a> (excluding the empty string) to use that encoding if the file lacks a UTF-8 or UTF-16 byte order mark. If omitted, it defaults to <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>.</p>
    <p><strong>RAW</strong>: Specify the word RAW (case-insensitive) to read the file's content as <a href="#Binary">raw binary data</a>. This option overrides any previously specified encoding and vice versa.</p>
    <p><strong>m1024</strong>: If this option is omitted, the entire file is loaded unless there is insufficient memory, in which case an error message is shown and the thread exits (but <a href="Try.htm">Try</a> can be used to avoid this). Otherwise, replace 1024 with a decimal or hexadecimal number of bytes. If the file is larger than this, only its leading part is loaded. Note: This might result in the last line ending in a naked carriage return (`r) rather than `r`n.</p>
    <p><strong>`n</strong> (a linefeed character): Replaces any/all occurrences of carriage return &amp; linefeed (`r`n) with linefeed (`n). However, this translation reduces performance and is usually not necessary. For example, text containing `r`n is already in the right format to be added to a <a href="StrReplace.htm">Gui Edit control</a>. The following <a href="LoopParse.htm">parsing loop</a> will work correctly regardless of whether each line ends in `r`n or just `n: <code>Loop Parse, MyFileContents, "`n", "`r"</code>.</p>
  </dd>
  
</dl>

<h3>ErrorLevel</h3>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 0 if the load was successful. It is set to 1 if a problem occurred such as: 1) file does not exist; 2) file is locked or inaccessible; 3) the system lacks sufficient memory to load the file.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> is set to the result of the operating system's GetLastError() function.</p>

<h3 id="Binary">Reading Binary Data</h3>
<p>When the <code>RAW</code> option is used, the return value is a string containing the raw, unmodified contents of the file. As the <a href="../Compat.htm#Format">native encoding</a> is UTF-16, the string always contains an even number of bytes. To get the number bytes which were read (rounded up to an even number), multiply the return value of <a href="../Functions.htm#StrLen">StrLen</a> by 2.</p>
<p>This option is generally required for reading binary data because by default, any bytes read from file are interpreted as text and may be converted from the source file's encoding (as specified in the options or by <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>) to the script's <a href="../Compat.htm#Format">native encoding</a>, UTF-16. If the data is not UTF-16 text, this conversion generally changes the data in undesired ways.</p>
<p>If the data contains UTF-16 text, note that many functions assume the data ends at the first binary zero (if any are present). For example, MsgBox will only show characters up to the first binary zero. However, the entire contents are still present and can be copied between variables, passed to or returned from functions, concatenated or compared with other binary strings, or be accessed by advanced methods such as <a href="NumGet.htm">NumGet()</a>.</p>
<p>For a demonstration of the RAW option, see <a href="../misc/Clipboard.htm#Save">Saving and Restoring the Clipboard</a>.</p>
<p>Finally, <a href="FileOpen.htm">FileOpen</a> and <a href="../objects/File.htm#RawRead">File.RawRead</a> or <a href="../objects/File.htm#ReadNum">File.Read<i>Num</i></a> may be used to read binary data without first reading the entire file into memory.</p>

<h3>Remarks</h3>
<p>When the goal is to load all or a large part of a file into memory, FileRead performs much better than using a <a href="LoopReadFile.htm">file-reading loop</a>.</p>
<p>A file greater than 4 GB in size will cause an exception to be thrown unless the <strong>*m</strong> option is present, in which case the leading part of the file is loaded. An exception will also be thrown if the program is unable to allocate enough memory to contain the requested amount of data.</p>
<p>If there is concern about using too much memory, check the file size beforehand with <a href="FileGetSize.htm">FileGetSize</a>.</p>
<p><a href="FileOpen.htm">FileOpen</a> provides more advanced functionality than FileRead, such as reading or writing data at a specific location in the file without reading the entire file into memory. See <a href="../objects/File.htm">File Object</a> for a list of functions.</p>

<h3>Related</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File Object</a>, <a href="LoopReadFile.htm">file-reading loop</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="Download.htm">Download</a></p>

<h3>Examples</h3>
<pre class="NoIndent" id="ex1"><em>; Example #1: Read text file into OutputVar.</em>
MyText := FileRead("C:\My Documents\My File.txt")</pre>
<pre class="NoIndent" id="ex2"><em>; Example #2: Quickly sort the contents of a file.</em>
Contents := FileRead("C:\Address List.txt")
if not ErrorLevel  <em>; Successfully loaded.</em>
{
    Contents := <a href="Sort.htm">Sort</a>(Contents)
    FileDelete "C:\Address List (alphabetical).txt"
    FileAppend Contents, "C:\Address List (alphabetical).txt"
    Contents := "" <em>; Free the memory.</em>
}</pre>

</body>
</html>
