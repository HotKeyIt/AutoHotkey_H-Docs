<!DOCTYPE HTML>
<html>
<head>
<title>GuiCreate()</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiCreate</h1>
<p>Creates a new <a href="../objects/Gui.htm">Gui object</a>, which is essential for creating and managing a GUI.</p>
<pre class="Syntax">GuiObj := <span class="func">GuiCreate</span>(<span class="optional">Options, Title := <a href="../Variables.htm#ScriptName">A_ScriptName</a>, EventObj</span>)</pre>

<h3>Parameters</h3>
<dl>
<dt id="Options">Options</dt><dd><p>For performance reasons, it is better to set all options in a single line.</p>
  <p>Specify a plus sign to add the option and a minus sign to remove it. For example: <code>Gui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p>The effect of this parameter is cumulative; that is, it alters only those settings that are explicitly specified, leaving all the others unchanged.</p>
  <p><strong>AlwaysOnTop</strong>: Makes the window stay on top of all other windows, which is the same effect as <a href="WinSet.htm#AlwaysOnTop">WinSetAlwaysOnTop</a>.</p>
  <p><strong>Border</strong>: Provides a thin-line border around the window. This is not common.</p>
  <p><strong>Caption</strong> (present by default): Provides a title bar and a thick window border/edge. When removing the caption from a window that will use <a href="WinSet.htm#TransColor">WinSetTransColor</a>, remove it only after setting the TransColor.</p>
  <p id="Delimiter"><strong>Delimiter</strong>: Specifies that the window should use a field separator other than pipe (|) whenever controls' contents are added via <a href="../objects/Gui.htm#Add">Gui.Add</a> or modified via <a href="../objects/GuiControl.htm">GuiControl object</a>. Specify a single character immediately after the word Delimiter. For example, <code>Gui.Opt("+Delimiter`n")</code> would use a linefeed character, which might be especially appropriate with <a href="../Scripts.htm#continuation">continuation sections</a>. Similarly, <code>Gui.Opt("+Delimiter|")</code> would revert to the default delimiter. To use space or tab, specify <code>Gui.Opt("+DelimiterSpace")</code> or <code>Gui.Opt("+DelimiterTab")</code>. Once the delimiter is changed, it affects all existing and subsequent <a href="../misc/Threads.htm">threads</a> that operate on this particular window.</p>
  <p><strong>Disabled</strong>: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale</strong>: Use <code>Gui.Opt("-DPIScale")</code> to disable DPI scaling, which is enabled by default. If DPI scaling is enabled on a system with a non-standard DPI setting, the <a href="../objects/Gui.htm">Gui object</a> and <a href="../objects/GuiControl.htm">GuiControl object</a> automatically scale coordinates and sizes to give controls roughly the same apparent size (but higher resolution). For example, with a DPI of 144 (150%), <code>E := Gui.Add("Edit", "w100")</code> would make the GUI control 150 pixels wide, but <a href="../objects/GuiControl.htm#Pos">E.Pos.W</a> would still return 100. <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> contains the system's current DPI.</p>
  <p>DPI scaling only applies to the <a href="../objects/Gui.htm">Gui object</a> and <a href="../objects/GuiControl.htm">GuiControl object</a>, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work. There are a number of ways to deal with this:</p>
  <ul>
    <li>Avoid using hard-coded coordinates wherever possible.  For example, use the <a href="../objects/Gui.htm#xp">xp</a>, <a href="../objects/Gui.htm#xs">xs</a>, <a href="../objects/Gui.htm#xm">xm</a> and <a href="../objects/Gui.htm#PosPlusMargin">x+m</a> options for positioning controls and specify height in <a href="../objects/Gui.htm#R">rows of text</a> instead of pixels.</li>
    <li>Enable (<code>Gui.Opt("+DPIScale")</code>) and disable (<code>Gui.Opt("-DPIScale")</code>) scaling on the fly, as needed. Changing the setting does not affect positions or sizes which have already been set.</li>
    <li>Manually scale the coordinates. For example, <code>x*(A_ScreenDPI/96)</code> converts x from logical/GUI coordinates to physical/non-GUI coordinates.</li>
  </ul>
  <p id="LastFound"><strong>LastFound</strong>: Sets the window to be the <a href="../misc/WinTitle.htm#LastFoundWindow">last found window</a> (though this is unnecessary in a <a href="../objects/GuiOnEvent.htm#Threads">GUI thread</a> because it is done automatically), which allows functions such as <a href="../commands/WinGet.htm#Style">WinGetStyle</a> and <a href="../commands/WinSet.htm#Transparent">WinSetTransparent</a> to operate on it even if it is hidden (that is, <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is not necessary). This is especially useful for changing the properties of the window before showing it. For example:</p>
  <pre>Gui.Opt(&quot;+LastFound&quot;)
WinSetTransColor(CustomColor " 150")
Gui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox</strong>: Enables the maximize button in the title bar. This is also included as part of <em>Resize</em> below.</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (present by default): Enables the minimize button in the title bar.</p>
  <p id="MinSize"><strong>MinSize</strong> and <strong>MaxSize</strong>: Determines the minimum and/or maximum size of the window, such as when the user drags its edges to resize it. Specify the word <em>MinSize</em> and/or <em>MaxSize</em> with no suffix to use the window's current size as the limit (if the window has no current size, it will use the size from the first use of <a href="../objects/Gui.htm#Show">Gui.Show</a>). Alternatively, append the width, followed by an X, followed by the height; for example: <code>Gui.Opt("+Resize +MinSize640x480")</code>. The dimensions are in pixels, and they specify the size of the window's client area (which excludes borders, title bar, and <a href="../objects/Gui.htm#Menu">menu bar</a>). Specify each number as decimal, not hexadecimal.</p>
  <p>Either the width or the height may be omitted to leave it unchanged (e.g. <code>+MinSize640x</code> or <code>+MinSizex480</code>). Furthermore, Min/MaxSize can be specified more than once to use the window's current size for one dimension and an explicit size for the other. For example, <code>+MinSize +MinSize640x</code> would use the window's current size for the height and 640 for the width.</p>
  <p>If <em>MinSize</em> and <em>MaxSize</em> are never used, the operating system's defaults are used (similarly, <code>Gui.Opt("-MinSize -MaxSize")</code> can be used to return to the defaults). Note: the window must have <a href="#Resize">+Resize</a> to allow resizing by the user.</p>
  <p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>Gui.Opt("+OwnDialogs")</code> should be specified in each <a href="../misc/Threads.htm">thread</a> (such as a event handling function of a Button control) for which subsequently displayed <a href="MsgBox.htm">MsgBox</a>, <a href="InputBox.htm">InputBox</a>, <a href="FileSelect.htm">FileSelect</a>, and <a href="DirSelect.htm">DirSelect</a> dialogs should be owned by the window. Such dialogs are modal, meaning that the user cannot interact with the GUI window until dismissing the dialog. By contrast, <a href="ToolTip.htm">ToolTip</a> do not become modal even though they become owned; they will merely stay always on top of their owner. In either case, any owned dialog or window is automatically destroyed when its GUI window is <a href="../objects/Gui.htm#Destroy">destroyed</a>.</p>
  <p>There is typically no need to turn this setting back off because it does not affect other <a href="../misc/Threads.htm">threads</a>. However, if a thread needs to display both owned and unowned dialogs, it may turn off this setting via <code>Gui.Opt("-OwnDialogs")</code>.</p>
  <p id="Owner"><strong>Owner</strong>: Use <em>+Owner</em> to make the window owned by another. An owned window has no taskbar button by default, and when visible it is always on top of its owner. It is also automatically destroyed when its owner is destroyed. <em>+Owner</em> can be used before or after the owned window is created. There are two ways to use <em>+Owner</em>, as shown below:</p>
  <pre>Gui.Opt("+OwnerMyOtherGui")  <em>; Make the GUI owned by <i>MyOtherGui</i>.</em>
Gui.Opt("+Owner")  <em>; Make the GUI owned by <a href="Menu.htm#MainWindow">script's main window</a> to prevent display of a taskbar button.</em></pre>
  <p><code>+Owner</code> can be immediately followed by the <a href="../objects/GuiControl.htm#Name">name</a> or number of an existing GUI or the <a href="../objects/Gui.htm#Hwnd">HWND</a> of any top-level window.</p>
  <p>To prevent the user from interacting with the owner while one of its owned window is visible, disable the owner via <code>Gui.Opt("+Disabled")</code>. Later (when the time comes to cancel or destroy the owned window), re-enable the owner via <code>Gui.Opt("-Disabled")</code>. Do this prior to cancel/destroy so that the owner will be reactivated automatically.</p>
  <p id="Parent"><strong>Parent</strong>: Use <code>+Parent</code> immediately followed by the <a href="../objects/GuiControl.htm#Name">name</a> or number of an existing GUI or the <a href="../objects/Gui.htm#Hwnd">HWND</a> of any window or control to use it as the parent of this window. To convert the GUI back into a top-level window, use <code>-Parent</code>. This option works even after the window is created.</p>
  <p id="Resize"><strong>Resize</strong>: Makes the window resizable and enables its maximize button in the title bar. To avoid enabling the maximize button, specify <code>+Resize -MaximizeBox</code>.</p>
  <p><strong>SysMenu</strong> (present by default): Specify <code>-SysMenu</code> (minus SysMenu) to omit the system menu and icon in the window's upper left corner. This will also omit the minimize, maximize, and close buttons in the title bar.</p>
  <p id="Theme"><strong>Theme</strong>: By specifying <code>-Theme</code>, all subsequently created controls in the window will have Classic Theme appearance on Windows XP and beyond. To later create additional controls that obey the current theme, turn it back on via <code>+Theme</code>. Note: This option has no effect on operating systems older than Windows XP, nor does it have any effect on XP itself if the Classic Theme is in effect. Finally, this setting may be changed for an individual control by specifying <code>+Theme</code> or <code>-Theme</code> in its options when it is created.</p>
  <p><strong>ToolWindow</strong>: Provides a narrower title bar but the window will have no taskbar button.</p>
  <p><strong>(Unnamed Style)</strong>: Specify a plus or minus sign followed immediately by a decimal or hexadecimal <a href="../misc/Styles.htm">style number</a>.</p>
  <p><strong>(Unnamed ExStyle)</strong>: Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For example, <code>+E0x40000</code> would add the WS_EX_APPWINDOW style, which provides a taskbar button for a window that would otherwise lack one. Although the other extended styles are not documented here (since they are rarely used), they can be discovered by searching for WS_EX_APPWINDOW at <a href="http://www.microsoft.com">www.microsoft.com</a>.</p></dd>
<dt>Title</dt><dd><p>The window title. If omitted, it defaults to the current value of <a href="../Variables.htm#ScriptName">A_ScriptName</a>.</p></dd>
<dt id="EventObj">EventObj</dt><dd><p>An "event sink", or object to bind events to. If <em>EventObj</em> is specified, <a href="../objects/GuiOnEvent.htm">OnEvent</a>, OnNotify and OnCommand can be used to register methods of <em>EventObj</em> to be called when an event is raised. If omitted or empty, any string passed to OnEvent's <em>Function</em> parameter is interpreted as a function name.</p></dd>
</dl>
  
<h3>Return Value</h3>
<p>Returns a&nbsp;<a href="../objects/Gui.htm">Gui object</a>. This object provides methods and properties for creating and managing windows, and creating controls.</p>

<h3 id="Navigate">Keyboard Navigation</h3>
<p>A GUI window may be navigated via the TAB key, which moves keyboard focus to the next input-capable control (controls from which the <a href="../objects/Gui.htm#Tabstop">Tabstop</a> style has been removed are skipped). The order of navigation is determined by the order in which the controls were originally added. When the window is shown for the first time, the first input-capable control that has the Tabstop style (which most control types have by default) will have keyboard focus.</p>
<p id="ShortcutKey">Certain controls may contain an ampersand (&amp;) to create a keyboard shortcut, which might be displayed in the control's text as an underlined character (depending on system settings). A user activates the shortcut by holding down the ALT key then typing the corresponding character. For buttons, checkboxes,  and radio buttons, pressing the shortcut is the same as clicking the control. For GroupBoxes and Text controls, pressing the shortcut causes keyboard focus to jump to the first input-capable <a href="../objects/Gui.htm#Tabstop">tabstop</a> control that was created after it. However, if more than one control has the same shortcut key, pressing the shortcut will alternate keyboard focus among all controls with the same shortcut.</p>
<p>To display a literal ampersand inside the control types mentioned above, specify two consecutive ampersands as in this example: <code>Save &amp;&amp; Exit</code>.</p>

<h3 id="Appear">Window Appearance</h3>
<p>For its icon, a GUI window uses the tray icon that was in effect at the time the window was created. Thus, to have a different icon, change the tray icon before creating the window. For example: <code><a href="Menu.htm">Menu</a>("Tray", "Icon", "MyIcon.ico")</code>. It is also possible to have a different large icon for a window than its small icon (the large icon is displayed in the alt-tab task switcher). This can be done via DllCall and SendMessage; for example:</p>
<pre>hIcon32 := <a href="DllCall.htm">DllCall</a>("LoadImage", uint, 0
  , str, "My Icon.ico"  <em>; Icon filename (this file may contain multiple icons).</em>
  , uint, 1  <em>; Type of image: IMAGE_ICON</em>
  , int, 32, int, 32  <em>; Desired width and height of image (helps LoadImage decide which icon is best).</em>
  , uint, 0x10)  <em>; Flags: LR_LOADFROMFILE</em>
Gui := GuiCreate("+LastFound")
<a href="PostMessage.htm">SendMessage</a>(0x80, 1, hIcon32)  <em>; 0x80 is WM_SETICON; and 1 means ICON_BIG (vs. 0 for ICON_SMALL).</em>
Gui.Show()</pre>
<p>Due to OS limitations, Checkboxes, Radio buttons, and GroupBoxes for which a non-default text color was specified will take on Classic Theme appearance on Windows XP and beyond.</p>
<p>Related topic: <a href="../objects/Gui.htm#MarginX">window's margin</a>.</p>

<h3 id="GenRemarks">General Remarks</h3>
<p>Use the <a href="../objects/GuiControl.htm">GuiControl object</a> to operate upon individual controls in a GUI window.</p>
<p>Each GUI window may have up to 11,000 controls. However, use caution when creating more than 5000 controls because system instability may occur for certain control types.</p>
<p>If the script is not <a href="../Scripts.htm#persistent">persistent</a> for any other reason, it will exit after the last visible GUI is closed; either when the last thread completes or immediately if no threads are running.</p>

<h3>Related</h3>
<p><a href="../objects/Gui.htm">Gui object</a>, <a href="../objects/GuiControl.htm">GuiControl object</a>, <a href="GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Control Types</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control functions</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelect.htm">FileSelect</a>, <a href="DirSelect.htm">DirSelect</a></p>
<h3 id="Examples">Examples</h3>
<pre class="NoIndent"><em>; Example: Display a text pop-up:</em>

Gui := GuiCreate(, "Title of Window")
Gui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner avoids a taskbar button.</em>
Gui.Add("Text",, "Some text to display.")
Gui.Show("NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em></pre>

<pre class="NoIndent"><em>; Example: A simple input-box that asks for first name and last name:</em>

Gui := GuiCreate(, "Simple Input Example")
Gui.Add("Text",, "First name:")
Gui.Add("Text",, "Last name:")
Gui.Add("Edit", "vFirstName ym")  <em>; The ym option starts a new column of controls.</em>
Gui.Add("Edit", "vLastName")
Gui.Add("Button", "default", "OK").OnEvent("Click", "Gui_Close")
Gui.OnEvent("Close", "Gui_Close")
Gui.Show()

Gui_Close(Gui)
{
  Saved := Gui.Submit()  <em>; Save the contents of named controls into an object.</em>
  MsgBox("You entered '%Saved.FirstName% %Saved.LastName%'.")
}</pre>

<pre class="NoIndent"><em>; Example: Tab control:</em>

Gui := GuiCreate()
Tab := Gui.Add("Tab3",, "First Tab|Second Tab|Third Tab")
Gui.Add("Checkbox", "vMyCheckbox", "Sample checkbox") 
Tab.UseTab(2)
Gui.Add("Radio", "vMyRadio", "Sample radio1")
Gui.Add("Radio",, "Sample radio2")
Tab.UseTab(3)
Gui.Add("Edit", "vMyEdit r5")  <em>; r5 means 5 rows tall.</em>
Tab.UseTab()  <em>; i.e. subsequently-added controls will not belong to the tab control.</em>
Gui.Add("Button", "default xm", "OK").OnEvent("Click", "Gui_Close")  <em>; xm puts it at the bottom left corner.</em>
Gui.OnEvent("Close", "Gui_Close")
Gui.OnEvent("Escape", "Gui_Close")
Gui.Show()

Gui_Close(Gui)
{
  Saved := Gui.Submit()  <em>; Save the contents of named controls into an object.</em>
  MsgBox("You entered:`n" Saved.MyCheckbox "`n" Saved.MyRadio "`n" Saved.MyEdit)
}</pre>

<pre class="NoIndent"><em>; Example: ListBox containing files in a directory:</em>

Gui := GuiCreate()
Gui.Add("Text",, "Pick a file to launch from the list below.")
fn := Func("LaunchFile").bind(Gui)
LB := Gui.Add("ListBox", "w640 r10 vFile"), LB.OnEvent("DoubleClick", fn)
LoopFiles("C:\*.*")  <em>; Change this folder and wildcard pattern to suit your preferences.</em>
    LB.Add(A_LoopFilePath)
Gui.Add("Button", "Default", "OK").OnEvent("Click", fn)
Gui.Show()

LaunchFile(Gui)
{
  Saved := Gui.Submit()
  if MsgBox("Would you like to launch the file or document below?`n`n%Saved.File%",, 4) = "No"
    return
  try <em>; Otherwise, try to launch it:</em>
    Run(Saved.File)
  catch Error
    MsgBox(Error.Extra)
}</pre>

<pre class="NoIndent" id="ExToolTip"><em>; Example: Display context-senstive help (via ToolTip) whenever the user moves the mouse over a particular control:</em>

Gui := GuiCreate()
Gui.Add("Edit", "vMyEdit")
MyEdit_TT := "This is a tooltip for the control whose name is MyEdit."
Gui.Add("DropDownList", "vMyDDL", "Red|Green|Blue")
MyDDL_TT := "Choose a color from the drop-down list."
Gui.Add("Checkbox", "vMyCheckBox", "This control has no tooltip.")
Gui.OnEvent("Close", "Gui_Close")
Gui.Show()
OnMessage(0x200, "WM_MOUSEMOVE")

WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
  global  
  static PrevHwnd
  if (Hwnd &lt;gt; PrevHwnd)
  {
    Text := "", ToolTip() <em>; Turn off any previous tooltip.</em>
    CurrControl := GuiCtrlFromHwnd(Hwnd)
    if CurrControl
    {
      Text := %CurrControl.Name%_TT
      SetTimer("DisplayToolTip", -1000)
    }
    PrevHwnd := Hwnd
  }
}

DisplayToolTip()
{
  global
  ToolTip(Text)
  SetTimer("ToolTip", -3000) <em>; Remove the tooltip.</em>
}

Gui_Close()
{
  ExitApp()
}</pre>

<pre class="NoIndent" id="OSD"><em>; Example: On-screen display (OSD) via transparent window:</em>

Gui := GuiCreate()
Gui.Opt("+LastFound +AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow avoids a taskbar button and an alt-tab menu item.</em>
Gui.BackColor := "EEAA99"  <em>; Can be any RGB color (it will be made transparent below).</em>
Gui.SetFont("s32")  <em>; Set a large font size (32-point).</em>
CoordText := Gui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY serve to auto-size the window.
; Make all pixels of this color transparent and make the text itself translucent (150):</em>
WinSetTransColor(Gui.BackColor " 150")
fn := Func("UpdateOSD").bind(CoordText), SetTimer(fn, 200)
UpdateOSD(CoordText)  <em>; Make the first update immediate rather than waiting for the timer.</em>
Gui.Show("x0 y400 NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em>

UpdateOSD(GuiCtrl)
{
  MouseGetPos(MouseX, MouseY)
  GuiCtrl.Value := "X%MouseX%, Y%MouseY%"
}</pre>

<pre class="NoIndent"><em>; Example: A moving progress bar overlayed on a background image.</em>

Gui := GuiCreate()
Gui.BackColor := "White"
Gui.Add("Picture", "x0 y0 h350 w450", "%A_WinDir%\Web\Wallpaper\Windows\img0.jpg")
MyBtn := Gui.Add("Button", "Default xp+20 yp+250", "Start the Bar Moving")
MyProgress := Gui.Add("Progress", "w416")
MyText := Gui.Add("Text", "wp")  <em>; wp means "use width of previous".</em>
MyBtn.OnEvent("Click", Func("MoveBar").bind(MyProgress, MyText))
Gui.Show()

MoveBar(ProgressCtrl, TextCtrl)
{
  LoopFiles("%A_WinDir%\*.*")
  {
    if A_Index > 100
      break
    ProgressCtrl.Value := A_Index
    TextCtrl.Value := A_LoopFileName
    Sleep 50
  }
  TextCtrl.Value := "Bar finished."
}</pre>

<pre class="NoIndent"><em>; Example: Simple image viewer:</em>

Gui := GuiCreate("+Resize")
MyBtn := Gui.Add("Button", "default", "&Load New Image")
MyRadio := Gui.Add("Radio", "ym+5 x+10 checked", "Load &actual size")
Gui.Add("Radio", "ym+5 x+10", "Load to &fit screen")
MyPic := Gui.Add("Pic", "xm vPic")
MyBtn.OnEvent("Click", Func("LoadNewImage").bind(Gui, MyRadio, MyPic))
Gui.Show()

LoadNewImage(Gui, RadioCtrl, PicCtrl)
{
  File := FileSelect(,, "Select an image:", "Images (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
  if File = ""
    return
  if RadioCtrl.Value = 1  <em>; Display image at its actual size.</em>
  {
    Width := 0
    Height := 0
  }
  else <em>; Second radio is selected: Resize the image to fit the screen.</em>
  {
    Width := A_ScreenWidth - 28  <em>; Minus 28 to allow room for borders and margins inside.</em>
    Height := -1  <em>; "Keep aspect ratio" seems best.</em>
  }
  PicCtrl.Value := "*w%Width% *h%Height% %File%"  <em>; Load the image.</em>
  Gui.Title := File
  Gui.Show("xCenter y0 AutoSize")  <em>; Resize the window to match the picture size.</em>
}</pre>

<pre class="NoIndent"><em>; Example: Simple text editor with menu bar.</em>

<em>; Make these variables accessible for all the functions below:</em>
global Gui, MainEdit, CurrentFileName, About

<em>; Create the GUI window:</em>
Gui := GuiCreate("+Resize", "Untitled")  <em>; Make the window resizable.</em>

<em>; Create the sub-menus for the menu bar:</em>
Menu("FileMenu", "Add", "&New", "MenuFileNew")
Menu("FileMenu", "Add", "&Open", "MenuFileOpen")
Menu("FileMenu", "Add", "&Save", "MenuFileSave")
Menu("FileMenu", "Add", "Save &As", "MenuFileSaveAs")
Menu("FileMenu", "Add") <em>; Separator line.</em>
Menu("FileMenu", "Add", "E&xit", "MenuFileExit")
Menu("HelpMenu", "Add", "&About", "MenuHelpAbout")

<em>; Create the menu bar by attaching the sub-menus to it:</em>
Menu("MyMenuBar", "Add", "&File", ":FileMenu")
Menu("MyMenuBar", "Add", "&Help", ":HelpMenu")

<em>; Attach the menu bar to the window:</em>
Gui.Menu := "MyMenuBar"

<em>; Create the main Edit control:</em>
MainEdit := Gui.Add("Edit", "WantTab W600 R20")

<em>; Apply events:</em>
Gui.OnEvent("DropFiles", "Gui_DropFiles")
Gui.OnEvent("Size", "Gui_Size")

MenuFileNew()  <em>; Apply default settings.</em>
Gui.Show()  <em>; Display the window.</em>

MenuFileNew()
{
  MainEdit.Value := ""  <em>; Clear the Edit control.</em>
  Menu("FileMenu", "Disable", "3&")  <em>; Gray out &Save.</em>
  Gui.Title := "Untitled"
}

MenuFileOpen()
{
  Gui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
  SelectedFileName := FileSelect(3,, "Open File", "Text Documents (*.txt)")
  if SelectedFileName = "" <em>; No file selected.</em>
    return
  CurrentFileName := readContent(SelectedFileName)
}

MenuFileSave()
{
  saveContent(CurrentFileName)
}

MenuFileSaveAs()
{
  Gui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
  SelectedFileName := FileSelect("S16",, "Save File, Text Documents (*.txt)")
  if SelectedFileName = "" <em>; No file selected.</em>
    return
  CurrentFileName := saveContent(SelectedFileName)
}

MenuFileExit()  <em>; User chose "Exit" from the File menu.</em>
{
  WinClose()
}

MenuHelpAbout()
{
  About := GuiCreate("+owner%Gui.Hwnd%")  <em>; Make the main window the owner of the "about box".</em>
  Gui.Opt("+Disabled")  <em>; Disable main window.</em>
  About.Add("Text",, "Text for about box.")
  About.Add("Button", "Default", "OK").OnEvent("Click", "About_Close")
  About.OnEvent("Close", "About_Close")
  About.OnEvent("Escape", "About_Close")
  About.Show()
}

readContent(FileName)
{
  FileContent := FileRead(FileName)  <em>; Read the file's contents into the variable.</em>
  if ErrorLevel
  {
    MsgBox("Could not open '%FileName%'.")
    return
  }
  MainEdit.Value := FileContent  <em>; Put the text into the control.</em>
  Menu("FileMenu", "Enable", "3&")  <em>; Re-enable &Save.</em>
  Gui.Title := FileName  <em>; Show file name in title bar.</em>
  return FileName
}

saveContent(FileName)
{
  if FileExist(FileName)
  {
    FileDelete(FileName)
    if ErrorLevel
    {
      MsgBox("The attempt to overwrite '%FileName%' failed.")
      return
    }
  }
  FileAppend(MainEdit.Value, FileName)  <em>; Save the contents to the file.
  ; Upon success, Show file name in title bar (in case we were called by MenuFileSaveAs):</em>
  Gui.Title := FileName
  return FileName
}

About_Close()
{
  Gui.Opt("-Disabled")  <em>; Re-enable the main window (must be done prior to the next step).</em>
  About.Destroy()  <em>; Destroy the about box.</em>
}

Gui_DropFiles(Gui, FileArray)  <em>; Support drag & drop.</em>
{
  CurrentFileName := readContent(FileArray[1])  <em>; Read the first file only (in case there's more than one).</em>
}

Gui_Size(Gui, MinMax, Width, Height)
{
  if MinMax = -1  <em>; The window has been minimized. No action needed.</em>
    return
  <em>; Otherwise, the window has been resized or maximized. Resize the Edit control to match.</em>
  MainEdit.Move("W%Width-20% H%Height-20%")
}</pre>
</body>
</html>
