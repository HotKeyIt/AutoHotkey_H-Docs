<!DOCTYPE HTML>
<html>
<head>
<title>Math Functions</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Math Functions</h1>

<p><strong>Note</strong>: Math functions generally return a blank value (empty string) if any of the incoming parameters are non-numeric, or the operation is invalid (such as divide by zero).</p>
<h4>Quick Reference:</h4>
<ul>
  <li><a href="#General">General Math</a>:
    <ul>
      <li><a href="#Abs">Abs - Absolute value</a></li>
      <li><a href="#Ceil">Ceil - Rounding up</a></li>
      <li><a href="#Exp">Exp - Exponential</a></li>
      <li><a href="#Floor">Floor - Rounding down</a></li>
      <li><a href="#Log">Log - Decimal logarithm</a></li>
      <li><a href="#Ln">Ln - Natural logarithm</a></li>
      <li><a href="#Mod">Mod - Remainder after division (Modulo)</a></li>
      <li><a href="#Round">Round - Rounding</a></li>
      <li><a href="#Sqrt">Sqrt - Square root</a></li>
    </ul>
  </li>
  <li><a href="#Trigonometry">Trigonometry</a>:
    <ul>
      <li><a href="#Sin">Sin - Sine</a></li>
      <li><a href="#Cos">Cos - Cosine</a></li>
      <li><a href="#Tan">Tan - Tangent</a></li>
      <li><a href="#ASin">ASin - Arcsine</a></li>
      <li><a href="#ACos">ACos - Arccosine</a></li>
      <li><a href="#ATan">ATan - Arctangent</a></li>
    </ul>
  </li>
  <li><a href="#Errors">Error-handling</a></li>
</ul>

<h2 id="General">General Math</h2>

<div class="methodShort" id="Abs">
<h2>Abs <span class="ver">Absolute value</span></h2>
<pre class="Syntax">Value := Abs(Number)</pre>
<p>Returns the absolute value of <em>Number</em>.</p>
<p>The return value is the same type as <em>Number</em> (integer or floating point).</p>
<pre class="NoIndent">MsgBox, % Abs(-1.2) <em>; Returns 1.2</em></pre>
</div>

<div class="methodShort" id="Ceil">
<h2>Ceil <span class="ver">Rounding up</span></h2>
<pre class="Syntax">Value := Ceil(Number)</pre>
<p>Returns <em>Number</em> rounded up to the nearest integer (without any .00 suffix).</p>
<pre class="NoIndent">MsgBox, % Ceil(1.2)  <em>; Returns 2</em>
MsgBox, % Ceil(-1.2) <em>; Returns -1</em></pre>
</div>

<div class="methodShort" id="Exp">
<h2>Exp <span class="ver">Exponential</span></h2>
<pre class="Syntax">Value := Exp(N)</pre>
<p>Returns <em>e</em> (which is approximately 2.71828182845905) raised to the <em>N</em>th power.</p>
<p><em>N</em> may be negative and may contain a decimal point. To raise  numbers other than <em>e</em> to a power, use the <a href="../Variables.htm#pow">** operator</a>.</p>
<pre class="NoIndent">MsgBox, % Exp(1.2) <em>; Returns 3.320117</em></pre>
</div>

<div class="methodShort" id="Floor">
<h2>Floor <span class="ver">Rounding down</span></h2>
<pre class="Syntax">Value := Floor(Number)</pre>
<p>Returns <em>Number</em> rounded down to the nearest integer (without any .00 suffix).</p>
<pre class="NoIndent">MsgBox, % Floor(1.2)  <em>; Returns 1</em>
MsgBox, % Floor(-1.2) <em>; Returns -2</em></pre>
</div>

<div class="methodShort" id="Log">
<h2>Log <span class="ver">Decimal logarithm</span></h2>
<pre class="Syntax">Value := Log(Number)</pre>
<p>Returns the logarithm (base 10) of <em>Number</em>.</p>
<p>The result is a floating-point number. If <em>Number</em> is negative, an empty string is returned.</p>
<pre class="NoIndent">MsgBox, % Log(1.2) <em>; Returns 0.079181</em></pre>
</div>

<div class="methodShort" id="Ln">
<h2>Ln <span class="ver">Natural logarithm</span></h2>
<pre class="Syntax">Value := Ln(Number)</pre>
<p>Returns the natural logarithm (base e) of <em>Number</em>.</p>
<p>The result is a floating-point number. If <em>Number</em> is negative, an empty string is returned.</p>
<pre class="NoIndent">MsgBox, % Ln(1.2) <em>; Returns 0.182322</em></pre>
</div>

<div class="methodShort" id="Mod">
<h2>Mod <span class="ver">Remainder after division (Modulo)</span></h2>
<pre class="Syntax">Value := Mod(Dividend, Divisor)</pre>
<p>Returns the remainder when <em>Dividend</em> is divided by <em>Divisor</em>.</p>
<p>The sign of the result is always the same as the sign of the first parameter. If either input is a floating point number, the result is also a floating point number. If the second parameter is zero, the function yields a blank result (empty string).</p>
<pre class="NoIndent">MsgBox, % Mod(7.5, 2) <em>; Returns 1.5 (2 x 3 + 1.5)</em></pre>
</div>

<div class="methodShort" id="Round">
<h2>Round <span class="ver">Rounding</span></h2>
<pre class="Syntax">Value := Round(Number [, N])</pre>
<p>Returns <em>Number</em> rounded to <em>N</em> decimal places.</p>
<p>If <em>N</em> is omitted or 0, <em>Number</em> is rounded to the nearest integer:</p>
<pre class="NoIndent">MsgBox, % Round(3.14)    <em>; Returns 3</em></pre>
<p>If <em>N</em> is positive number, <em>Number</em> is rounded to <em>N</em> decimal places:</p>
<pre class="NoIndent">MsgBox, % Round(3.14, 1) <em>; Returns 3.1</em></pre>
<p>If <em>N</em> is negative, <em>Number</em> is rounded by <em>N</em> digits to the left of the decimal point:</p>
<pre class="NoIndent">MsgBox, % Round(345, -1) <em>; Returns 350</em>
MsgBox, % Round(345, -2) <em>; Returns 300</em></pre>
<p>The result is an integer if <em>N</em> is omitted or less than 1. Otherwise, the result is a numeric string with exactly <em>N</em> decimal places. If a pure number is needed, simply perform another math operation on Round()'s return value; for example: <code>Round(3.333, 1)+0</code>.</p>
</div>

<div class="methodShort" id="Sqrt">
<h2>Sqrt <span class="ver">Square root</span></h2>
<pre class="Syntax">Value := Sqrt(Number)</pre>
<p>Returns the square root of <em>Number</em>.</p>
<p>The result is a floating-point number. If <em>Number</em> is negative, the function yields a blank result (empty string).</p>
<pre class="NoIndent">MsgBox, % Sqrt(16) <em>; Returns 4</em></pre>
</div>

<h2 id="Trigonometry">Trigonometry</h2>

<p><strong>Note</strong>: To convert a radians value to degrees, multiply it by 180/pi (approximately 57.29578). To convert a degrees value to radians, multiply it by pi/180 (approximately 0.01745329252). The value of pi (approximately 3.141592653589793) is 4 times the arctangent of 1.</p>

<div class="methodShort" id="Sin">
<h2>Sin <span class="ver">Sine</span></h2>
<pre class="Syntax">Value := Sin(Number)</pre>
<p>Returns the trigonometric sine of <em>Number</em>.</p>
<p><em>Number</em> must be expressed in radians.</p>
<pre class="NoIndent">MsgBox, % Sin(1.2) <em>; Returns 0.932039</em></pre>
</div>

<div class="methodShort" id="Cos">
<h2>Cos <span class="ver">Cosine</span></h2>
<pre class="Syntax">Value := Cos(Number)</pre>
<p>Returns the trigonometric cosine of <em>Number</em>.</p>
<p><em>Number</em> must be expressed in radians.</p>
<pre class="NoIndent">MsgBox, % Cos(1.2) <em>; Returns 0.362358</em></pre>
</div>

<div class="methodShort" id="Tan">
<h2>Tan <span class="ver">Tangent</span></h2>
<pre class="Syntax">Value := Tan(Number)</pre>
<p>Returns the trigonometric tangent of <em>Number</em>.</p>
<p><em>Number</em> must be expressed in radians.</p>
<pre class="NoIndent">MsgBox, % Tan(1.2) <em>; Returns 2.572152</em></pre>
</div>

<div class="methodShort" id="ASin">
<h2>ASin <span class="ver">Arcsine</span></h2>
<pre class="Syntax">Value := ASin(Number)</pre>
<p>Returns the arcsine (the number whose sine is <em>Number</em>) in radians.</p>
<p>If <em>Number</em> is less than -1 or greater than 1, the function yields a blank result (empty string).</p>
<pre class="NoIndent">MsgBox, % ASin(0.2) <em>; Returns 0.201358</em></pre>
</div>

<div class="methodShort" id="ACos">
<h2>ACos <span class="ver">Arccosine</span></h2>
<pre class="Syntax">Value := ACos(Number)</pre>
<p>Returns the arccosine (the number whose cosine is <em>Number</em>) in radians.</p>
<p>If <em>Number</em> is less than -1 or greater than 1, the function yields a blank result (empty string).</p>
<pre class="NoIndent">MsgBox, % ACos(0.2) <em>; Returns 1.369438</em></pre>
</div>

<div class="methodShort" id="ATan">
<h2>ATan <span class="ver">Arctangent</span></h2>
<pre class="Syntax">Value := ATan(Number)</pre>
<p>Returns the arctangent (the number whose tangent is <em>Number</em>) in radians.</p>
<pre class="NoIndent">MsgBox, % ATan(1.2) <em>; Returns 0.876058</em></pre>
</div>

<h2 id="Errors">Error-Handling</h2>
<p>These functions return a blank result (empty string) if any incoming parameters are non-numeric or an invalid operation (such as divide by zero) is attempted.</p>

</body>
</html>
