<!DOCTYPE HTML>
<html>
<head>
<title>NumGet()</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumGet</h1>
<p>Returns the binary number stored at the specified address+offset.</p>
<pre class="Syntax"><b>OutputVar</b> := <span class="func">NumGet</span>(VarOrAddress <span class="optional">, Offset = 0, Type = UPtr</span>)<pre><em>Function Example:</em> <b>val</b> := NumGet(MyVar,"UInt") </pre></pre>

<h3>Parameters</h3>
<dl>

  <dt><b>OutputVar</b></dt>
  <dd><p>The name of the variable in which to store the number at the specified address+offset.</p>
	<p>If the target address is invalid, an empty string is returned. However, some invalid addresses cannot be detected as such and may cause unpredictable behaviour.</p></dd>

  <dt>VarOrAddress</dt>
  <dd>
		<p>A memory address or variable. If <em>VarOrAddress</em> is a variable such as <code>MyVar</code> and it contains a string (not a pure number), the address of the variable's string buffer is used. This is usually equivalent to passing <code>&amp;MyVar</code>, but omitting the &quot;&amp;&quot; performs better and ensures that the target address + offset is <a href="VarSetCapacity.htm">valid</a>. If the variable contains a pure number, that number is assumed to be an address.</p>
	</dd>

  <dt>Offset</dt>
  <dd><p>An offset - in bytes - which is added to <em>VarOrAddress</em> to determine the target address.</p></dd>

  <dt>Type</dt>
  <dd>
      <p>One of the following strings (defaults to UPtr if omitted):<br>
      UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr</p>
      <p>Unlike DllCall, these must be enclosed in quotes when used as literal strings.</p>
      <p>For details see <a href="DllCall.htm#types">DllCall Types</a>.</p>
    </dd>

</dl>

<h3>General Remarks</h3>
<p>If only two parameters are present, the second parameter can be either <em>Offset</em> or <em>Type</em>. For example, <code>NumGet(var, "int")</code> is valid.</p>

<h3>Related</h3>
<p><a href="NumPut.htm">NumPut</a>, <a href="DllCall.htm">DllCall</a>, <a href="VarSetCapacity.htm">VarSetCapacity</a></p>


</body>
</html>
