<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#DllImport</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#DllImport</h1>
<p>Creates a script function for a dll or exe function.</p>
<pre class="Syntax">#DllImport, Function_Name, [DllFile\]Function [, Type1, Arg1, Type2, Arg2, &quot;Cdecl ReturnType&quot;]
<pre><em>Example:</em> #DllImport, ExecScript, %A_AhkPath%\ahkExec,Str,,CDecl</pre></pre>

<h3>Parameters</h3>
<dl>
  <dt>Function_Name</dt>
  <dd><p>The name of new function. See example.</p></dd>
    
  <dt>[DllFile\]Function</dt>
  <dd><p>The DLL or EXE file name followed by a backslash and the name of the function. For example: <code>&quot;MyDLL\MyFunction&quot;</code> (the file extension &quot;.dll&quot; is the default when omitted). If an absolute path isn't specified, <em>DllFile</em> is assumed to be in the system's PATH or <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>. Following built-in variables can be used too: A_ScriptDir, A_AhkPath, A_DllPath, A_AppData, A_AppDataCommon.</p>
      <p><em><a name="std"></a>DllFile</em> may be omitted when calling a function that resides in User32.dll, Kernel32.dll, ComCtl32.dll, or Gdi32.dll. For example, <code>&quot;User32\IsWindowVisible&quot;</code> produces the same result as <code>&quot;IsWindowVisible&quot;</code>.</p>
      <p>If no function can be found by the given name, a "W" (Unicode) suffix is automatically appended. For example, <code>"MessageBox"</code> is the same as <code>"MessageBoxW"</code>.</p>
    <p>This parameter may also consist solely of an an integer, which is interpreted as the address of the function to call. Sources of such addresses include <a href="#COM">COM</a> and <a href="RegisterCallback.htm">RegisterCallback()</a>.
		<br><b>Note:</b> 9MyFunction or 0MyDll.dll\Function are not supported because they will be assumed integers and will cause an exception to be trown.</p>
	<p>This parameter may also be a hex string that represends the code.<br>Hex code for 64-bit can be appended after 32-bit code separated using colon (:) [32-bit hex]:[64-bit hex]. See also examples below.</p></dd>

  <dt>Type1, Arg1 (optional)</dt>
  <dd><p>Each of these pairs represents a single parameter to be passed to the function. The number of pairs is unlimited. For <em>Type</em>, see the <a href="DllCall.htm#types">types table</a>. Type can be specified without quotes.</p><p>For <em>Arg</em>, specify the default value to be passed to the function. This parameters will be only used if correspoinding parameter is omitted by function call. If Arg is a string it must be enclosed in quotes ("") and all parameters starting with integer will be converted to digits, hexadecimal values are supported too.</p></dd>

  <dt>Cdecl ReturnType (optional)</dt>
  <dd><p><a name="cdecl"></a>The word <em>Cdecl</em> is normally omitted because most functions use the standard calling convention rather than the &quot;C&quot; calling convention (functions such as wsprintf that accept a varying number of arguments are one exception to this). Note that most object-oriented C++ functions use the <i>thiscall</i> convention, which is not supported.</p>
      <p>If present, the word <em>Cdecl</em> should be listed before the return type (if any). Separate each word from the next with a space or tab. For example: <code>&quot;Cdecl Str&quot;</code>.</p>
      <p>Since a separate "C" calling convention does not exist in 64-bit code, <i>Cdecl</i> may be specified but has no effect on 64-bit builds of AutoHotkey.</p>
      <p><em>ReturnType</em>: If the function returns a 32-bit signed integer (Int), BOOL, or nothing at all, <em>ReturnType</em> may be omitted. Otherwise, specify one of the argument types from the <a href="#types">types table</a> below. The <a href="#asterisk">asterisk suffix</a> is also supported.</p></dd>

</dl>

<h3>General Remarks</h3>
<p>String parameters for Arg must not be enclosed in quotes (""). Parameters starting with number are assumed numbers, so for example 0ABC will be considered 0. Hexadecimal values are allowed too, so 0xA will be converted to 10.</p>

<h3>Related</h3>
<p><a href="DllCall.htm">DllCall</a>, <a href="DynaCall.htm">DynaCall</a>, <a href="WinApi.htm">WinApi</a></p>

<h3>Examples</h3>
<pre class="NoIndent">
#DllImport, SendMsg,user32\SendMessage,PTR,0,UInt,0x999,PTR,111,PTR,222,PTR
OnMessage(0x999,"Ox999")

<em>; DllCall("SendMessage","PTR",A_ScriptHwnd,"UINT",0x999,"PTR",111,"PTR",222,"PTR")</em>
SendMsg(A_ScriptHwnd)
SendMsg,,%A_ScriptHwnd%

<em>; DllCall("SendMessage","PTR",A_ScriptHwnd,"UINT",0x999,"PTR",1,"PTR",2,"PTR")</em>
SendMsg(A_ScriptHwnd,,1,2) 
SendMsg,,%A_ScriptHwnd%,,1,2
ExitApp

Ox999(w:=0,l:=0,m:=0,h:=0){
  MsgBox % w "`n" l "`n" m "`n" h
  return 1
}

<em>; Import RGB_TO_BGR function as hex, first hex is 32-bit and second hex 64-bit version.
; DWORD RGB_TO_BGR(COLORREF rgb){
; 	return ((rgb & 255) << 16) | (((rgb >> 8) & 255) << 8) | (rgb >> 16);
; }</em>
#DllImport,RGB_TO_BGR,8B4C24040FB6C18BD1C1E01081E200FF00000BC2C1E9100BC1C3:0FB6C18BD1C1E910C1E01081E200FF00000BC20BC1C3,UInt,,CDecl UInt
</pre>

</body>
</html>
