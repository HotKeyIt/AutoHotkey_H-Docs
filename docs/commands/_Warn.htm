<!DOCTYPE HTML>
<html>
<head>
<title>#Warn</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#Warn</h1>

<p>Enables or disables warnings for specific conditions which may indicate an error, such as a typo or missing "global" declaration.</p>

<pre class="Syntax"><span class="func">#Warn</span> <span class="optional">WarningType, WarningMode</span></pre>

<h3>Parameters</h3>
<dl>

  <dt>WarningType</dt>
  <dd>
      <p>The type of warning to enable or disable. If omitted, it defaults to <i>All</i>.</p>
      <p><strong>UseUnsetLocal</strong> or <strong>UseUnsetGlobal</strong>: Warn when a variable is read without having previously been assigned a value or initialized with <a href="VarSetCapacity.htm">VarSetCapacity</a>.  If the variable is intended to be empty, assign an empty string to suppress this warning.</p>
      <p>This is split into separate warning types for locals and globals because it is more common to use a global variable without prior initialization, due to their persistent and script-wide nature.  For this reason, some script authors may wish to enable this type of warning for locals but disable it for globals.</p>
      <pre>#Warn
<em>;y := ""  ; This would suppress the warning.</em>
x := y    <em>; y hasn't been assigned a value.</em></pre>
      <p><strong>LocalSameAsGlobal</strong>: Before the script starts to run, display a warning for each <em>undeclared</em> local variable which has the same name as a global variable.  This is intended to prevent errors caused by forgetting to declare a global variable inside a function before attempting to access it.  If the variable really was intended to be local, a declaration such as <code>local x</code> or <code>static y</code> can be used to suppress the warning.</p>
      <pre>#Warn
g := 1
ShowG() {       <em>; The warning is displayed even if the function is never called.</em>
    <em>;global g   ; &lt;-- This is required to access the global variable.</em>
    MsgBox % g  <em>; Without the declaration, "g" is an empty local variable.</em>
}</pre>
      <p><strong>All</strong>: Apply the given <em>WarningMode</em> to all supported warning types.</p>
    </dd>

  <dt>WarningMode</dt>
  <dd>
      <p>A value indicating how warnings should be delivered. If omitted, it defaults to <em>MsgBox</em>.</p>
      <p><strong>MsgBox</strong>: Show a message box describing the warning.  Note that once the message box is dismissed, the script will continue as usual.</p>
      <p><strong>StdOut</strong>: Send a description of the warning to <em>stdout</em> (the program's standard output stream), along with the filename and line number.  This allows fancy editors such as SciTE to capture warnings without disrupting the script - the user can later jump to each offending line via the editor's output pane.</p>
      <p><strong>OutputDebug</strong>: Send a description of the warning to the debugger for display.  If a debugger is not active, this will have no effect.  For more details, see <a href="OutputDebug.htm">OutputDebug</a>.</p>
      <p><strong>Off</strong>: Disable warnings of the given <em>WarningType</em>.</p>
    </dd>

</dl>
<h3>Remarks</h3>
	<p>By default, all warnings are off.</p>
	<p>Warnings can't be enabled or disabled at run-time; the settings are determined when a script loads.  Therefore, the location in the script is not significant (and, like other # directives, #Warn cannot be executed conditionally).</p>
	<p>However, the ordering of multiple #Warn directives is significant: the last occurrence that sets a given warning determines the mode for that warning.  So, for example, the two statements below have the combined effect of enabling all warnings except UseUnsetGlobal:</p>
<pre>#Warn All
#Warn UseUnsetGlobal, Off
</pre>
<h3>Related</h3>
<p><a href="../Functions.htm#Locals">Local and Global Variables</a></p>
<h3>Example</h3>
<pre class="NoIndent">
#Warn All, Off                    <em>; Disable all warnings.  This is the default state.</em>
#Warn                             <em>; Enable every type of warning; show each warning in a message box.</em>
#Warn UseUnsetLocal, OutputDebug  <em>; Warn when a local variable is used before it's set; send warning to OutputDebug.</em>
</pre>

</body>
</html>
