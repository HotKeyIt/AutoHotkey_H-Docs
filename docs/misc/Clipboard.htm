<!DOCTYPE HTML>
<html>
<head>
<title>Clipboard and ClipboardAll</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>Clipboard and <a href="#ClipboardAll">ClipboardAll</a></h1>

<p><em>Clipboard</em> is a built-in <a href="../Variables.htm">variable</a> that reflects the current contents of the Windows clipboard if those contents can be expressed as text. By contrast, <em><a href="#ClipboardAll">ClipboardAll()</a></em> returns an object containing everything on the clipboard, such as pictures and formatting.</p>
<p id="CopiedFiles">Each line of text on <em>Clipboard</em> typically ends with carriage return and linefeed (CR+LF), which can be expressed in the script as <code>`r`n</code>. Files (such as those copied from an open Explorer window via Control-C) are considered to be text: They are automatically converted to their filenames (with full path) whenever <em>Clipboard</em> is referenced in the script. To extract the files one by one, follow this example:</p>
<pre><a href="../commands/LoopParse.htm">Loop, parse</a>, %clipboard%, `n, `r
{
    Result := MsgBox("File number %A_Index% is %A_LoopField%.`n`nContinue?",, 4)
    if Result = "No", break
}</pre>
<p>To arrange the filenames in alphabetical order, use the <a href="../commands/Sort.htm">Sort</a> command. To write the filenames on the clipboard to a file, use <code><a href="../commands/FileAppend.htm">FileAppend</a>, %clipboard%`r`n, C:\My File.txt</code>. To change how long the script will keep trying to open the clipboard -- such as when it is in use by another application -- use <a href="../commands/_ClipboardTimeout.htm">#ClipboardTimeOut</a>.</p>
<strong>Basic examples:</strong>
<pre>clipboard := "my text"   <em>; Give the clipboard entirely new contents.</em>
clipboard := ""  <em>; Empty the clipboard.</em>
clipboard := clipboard   <em>; Convert any copied files, HTML, or other formatted text to plain text.</em>
clipboard := "%clipboard% Text to append."   <em>; Append some text to the clipboard.</em>
StrReplace, clipboard, %clipboard%, ABC, DEF   <em>; Replace all occurrences of ABC with DEF (also converts the clipboard to plain text).</em></pre>

<p><strong>Using ClipWait to improve script reliability:</strong></p>
<pre>clipboard := ""  <em>; Start off empty to allow ClipWait to detect when the text has arrived.</em>
Send ^c
<a href="../commands/ClipWait.htm">ClipWait</a>  <em>; Wait for the clipboard to contain text.</em>
MsgBox Control-C copied the following contents to the clipboard:`n`n%clipboard%</pre>

<h2 id="ClipboardAll">ClipboardAll <span class="headnote">(saving and restoring everything on the clipboard)</span></h2>
<p>Creates an object containing everything on the clipboard (such as pictures and formatting).</p>
<pre class="Syntax">ClipSaved := <span class="func">ClipboardAll</span>(<span class="optional">Data, Size</span>)</pre>

<h3>Parameters</h3>
<p>Omit both parameters to retrieve the current contents of the clipboard. Otherwise, specify one or both parameters to create an object containing the given binary clipboard data.</p>
<dl>
  <dt>Data</dt>
  <dd><p>A string containing binary data, or a pure integer which is the address of the binary data. The data must be in a specific format, so typically originates from a previous call to ClipboardAll(). See FileAppend below.</p></dd>
  <dt>Size</dt>
  <dd><p>The number of bytes of data to use. This is optional when <em>Data</em> is a string.</p></dd>
</dl>

<h3 id="clipboardall-object">ClipboardAll Object</h3>
<p>The return value is a ClipboardAll object, which has three properties:</p>
<dl>
  <dt>Data</dt>
  <dd><p>A string containing raw binary data which represents the clipboard contents. This is typically passed to <a href="../commands/FileAppend.htm">FileAppend</a> or <a href="../objects/File.htm#RawWrite">File.RawWrite</a> to write it to file.</p></dd>
  <dt>Ptr</dt>
  <dd><p>The address of the data contained by the object. This address is valid until the object is freed.</p></dd>
  <dt>Size</dt>
  <dd><p>The size, in bytes, of the raw binary data.</p></dd>
</dl>

<h3 id="Save">Saving and Restoring the Clipboard</h3>
<p><em>ClipboardAll</em> contains everything on the clipboard (such as pictures and formatting). It is most commonly used to save the clipboard's contents so that the script can temporarily use the clipboard for an operation. When the operation is completed, the script restores the original clipboard contents as shown below:</p>
<pre>ClipSaved := ClipboardAll()   <em>; Save the entire clipboard to a variable of your choice.
; ... here make temporary use of the clipboard, such as for quickly pasting large amounts of text ...</em>
Clipboard := ClipSaved   <em>; Restore the original clipboard. Note the use of <i>Clipboard</i> (not <i>ClipboardAll</i>).</em>
ClipSaved := ""  <em>; Free the memory in case the clipboard was very large.</em></pre>
<p><em>ClipboardAll</em> may also be saved to a file:</p>
<pre><em>; Option 1: Delete any existing file and then use FileAppend in "RAW" mode.</em>
<a href="../commands/FileDelete.htm">FileDelete</a> "C:\Company Logo.clip"
<a href="../commands/FileAppend.htm">FileAppend</a> ClipboardAll().Data, "C:\Company Logo.clip", "RAW" <em>; The file extension does not matter.</em>

<em>; Option 2: Use FileOpen in overwrite mode and File.RawWrite.</em>
<a href="../commands/FileOpen.htm">FileOpen</a>("C:\Company Logo.clip", "w").<a href="../objects/File.htm#RawWrite">RawWrite</a>(ClipboardAll().Data)</pre>
<p>To later load the file back onto the clipboard (or into a variable), follow this example:</p>
<pre>Clipboard := ClipboardAll(<a href="../commands/FileRead.htm">FileRead</a>("C:\Company Logo.clip", "RAW"))</pre>

<h3>Notes</h3>
<p>If <em>ClipboardAll</em> cannot retrieve one or more of the data objects (formats) on the clipboard, they will be omitted but all the remaining objects will be stored.</p>
<p>A variable containing clipboard data can be copied to another variable as in this example: <code>ClipSaved2 := ClipSaved</code>.</p>
<p><a href="../commands/ClipWait.htm">ClipWait</a> may be used to detect when the clipboard contains data (optionally including non-text data).</p>
<p>Binary data returned by the <code>Data</code> property internally consists of a four-byte format type, followed by a four-byte data-block size, followed by the data-block for that format. If the clipboard contained more than one format (which is almost always the case), these three items are repeated until all the formats are included. The data ends with a four-byte format type of 0.</p>
<p>Known limitation: Retrieving <em>ClipboardAll</em> while cells from Microsoft Excel are on the clipboard may cause Excel to display a &quot;no printers&quot; dialog.</p>
<p>Clipboard utilities written in AutoHotkey v1:</p>
<ul>
  <li>Deluxe Clipboard: Provides unlimited number of private, named clipboards to Copy, Cut, Paste, Append or CutAppend of selected text. <a href="http://www.autohotkey.com/forum/topic2665.html">www.autohotkey.com/forum/topic2665.html</a></li>
  <li>ClipStep: Control multiple clipboards using only the keyboard's Ctrl-X-C-V. <a href="http://www.autohotkey.com/forum/topic4836.html">www.autohotkey.com/forum/topic4836.html</a></li>
</ul>

<h2 id="OnClipboardChange">OnClipboardChange</h2>
<p>Scripts can detect changes to the content of the Clipboard by using <a href="../commands/OnClipboardChange.htm">OnClipboardChange</a>.</p>

</body>
</html>
