<!DOCTYPE HTML>
<html>
<head>
<title>Func Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Func Object</h1>

<p>Represents a user-defined or built-in function which can be called by the script.</p>

<p>For information about other objects which can be called like functions, see <a href="Functor.htm">Function Objects</a>.</p>

<p>A reference to a Func object is also known as a <em>function reference</em>. To retrieve a function reference, use the Func function as in the following example:</p>
<pre><em>; Retrieve a reference to the function named "StrLen".</em>
fn := Func("StrLen")

<em>; Display information about the function.</em>
MsgBox % fn.Name "() is " (fn.IsBuiltIn ? "built-in." : "user-defined.")</pre>
<p>If <em>fn</em> is a function reference, <code>Func(fn)</code> returns it. Thus, <code>fn := Func(fn)</code> can be used to ensure <em>fn</em> is a function reference. If <em>fn</em> is neither a valid function name nor a function reference, <em>Func</em> returns a blank value.</p>

<div class="methodShort" id="Call"><h2>Call</h2>
<p>Calls the function.</p>
<pre class="Syntax">Func.Call(<i>Parameters</i>)
%Func%(<i>Parameters</i>)</pre>
<p>The second form (a <a href="../Functions.htm#DynCall">dynamic function call</a>) also works with function names (strings) and other kinds of <a href="Functor.htm">function objects</a>.</p>
<p>Parameters and return value are defined by the function.</p>
</div>

<div class="methodShort" id="Bind"><h2>Bind</h2>
<p>Binds parameters to the function and returns a <a href="Functor.htm#BoundFunc">BoundFunc object</a>.</p>
<pre class="Syntax">BoundFunc := Func.Bind(<i>Parameters</i>)</pre>
<p><i>Parameters</i> can be any number of parameters.</p>
<p>For details and examples, see <a href="Functor.htm#BoundFunc">BoundFunc object</a>.</p>
</div>

<div class="methodShort" id="Name"><h2>Name</h2>
<p>Returns the function's name.</p>
<pre class="Syntax">Func.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h2>IsBuiltIn</h2>
<p>Returns <i>true</i> if the function is built-in and <i>false</i> otherwise.</p>
<pre class="Syntax">Func.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h2>IsVariadic</h2>
<p>Returns <i>true</i> if the function is <a href="../Functions.htm#Variadic">variadic</a> and <i>false</i> otherwise.</p>
<pre class="Syntax">Func.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h2>MinParams</h2>
<p>Returns the number of required parameters.</p>
<pre class="Syntax">Func.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h2>MaxParams</h2>
<p>Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function.</p>
<pre class="Syntax">Func.MaxParams</pre>
<p>If the function is <a href="../Functions.htm#Variadic">variadic</a>, the return value indicates the maximum number of parameters which can be accepted by the function without overflowing into the "variadic*" parameter.</p></div>

<div class="methodShort" id="IsByRef"><h2>IsByRef()</h2>
<p>Determines whether a parameter is ByRef.</p>
<pre class="Syntax">Func.IsByRef(ParamIndex)</pre>
<table class="info">
  <tr><td style="width:15%">ParamIndex</td><td>Optional: the one-based index of a parameter. If omitted, the return value indicates whether the function has any ByRef parameters.</td></tr>
  <tr><td><b>Returns</b></td><td>An empty string if the function is built-in or <i>ParamIndex</i> is invalid; otherwise, a boolean value indicating whether the parameter is ByRef.</td></tr>
</table>
</div>

<div class="methodShort" id="IsOptional"><h2>IsOptional()</h2>
<p>Determines whether a parameter is optional.</p>
<pre class="Syntax">Func.IsOptional(ParamIndex)</pre>
<table class="info">
  <tr><td style="width:15%">ParamIndex</td><td>Optional: the one-based index of a parameter. If omitted, the return value indicates whether the function has any optional parameters.</td></tr>
  <tr><td><b>Returns</b></td><td>An empty string if <i>ParamIndex</i> is invalid; otherwise, a boolean value indicating whether the parameter is optional.</td></tr>
</table>
<p>Parameters do not need to be formally declared if the function is variadic. Built-in functions are supported.</p></div>

</body>
</html>
