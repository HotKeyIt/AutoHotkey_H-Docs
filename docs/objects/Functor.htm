<!DOCTYPE HTML>
<html>
<head>
<title>Function Objects</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Function Objects</h1>

<p>"Function object" usually means any of the following:</p>
<ul>
  <li>A reference to a <a href="Func.htm">Func object</a>, which represents an actual <a href="../Functions.htm">function</a>; either built-in or defined by the script.</li>
  <li>A user-defined object which can be called like a function.  This is sometimes also referred to as a "functor".</li>
  <li>Any other object which can be called like a function, such as a <a href="#BoundFunc">BoundFunc object</a> or a JavaScript function object returned by a COM method.</li>
</ul>
<p>Function objects can be used with the following:</p>
<ul>
  <li><a href="../objects/GuiOnEvent.htm">Gui events</a></li>
  <li><a href="../commands/Hotkey.htm#Functor">Hotkey</a></li>
  <li><a href="../commands/Menu.htm#Functor">Menu</a></li>
  <li><a href="../commands/OnClipboardChange.htm">OnClipboardChange()</a></li>
  <li><a href="../commands/OnExit.htm">OnExit()</a></li>
  <li><a href="../commands/OnMessage.htm">OnMessage()</a></li>
  <li><a href="../commands/SetTimer.htm#Functor">SetTimer</a></li>
</ul>

<h2 id="User-Defined">User-Defined</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>User-defined function objects must define a <em>Call</em> method containing the implementation of the "function".</p>
<pre>class YourClassName {
    Call(a, b) {  <em>; Declare parameters as needed, or an <a href="../Functions.htm#Variadic">array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<h3 id="User-Defined-Examples">Examples</h3>
<p>The following example defines a function array which can be called; when called, it calls each element of the array in turn.</p>
<pre>class FuncArrayType {
    Call(obj, params*) {
        <em>; Call a list of functions.</em>
        Loop % this.Length()
            this[A_Index].Call(params*)
    }
}

<em>; Create an array of functions.</em>
funcArray := new FuncArrayType
<em>; Add some functions to the array (can be done at any point).</em>
funcArray.Push(Func("One"))
funcArray.Push(Func("Two"))
<em>; Create an object which uses the array as a method.</em>
obj := {method: funcArray}
<em>; Call the method.</em>
obj.method("foo", "bar")

One(param1, param2) {
    ListVars
    MsgBox
}
Two(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFunc Object</h2>
<p>Acts like a function, but just passes predefined parameters to another function.</p>
<p>There are two ways that BoundFunc objects can be created:</p>
<ul>
  <li>By calling the <a href="Func.htm#Bind">Func.Bind()</a> method, which binds parameter values to a function.</li>
  <li>By calling the <a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a> function, which binds parameter values and a method name to a target object.</li>
</ul>
<p>BoundFunc objects can be called as shown in the example below. No other methods are supported. When the BoundFunc is called, it calls the function or method to which it is bound, passing any bound parameters followed by any which were passed by the caller. For example:</p>
<pre>fn := Func("RealFn").Bind(1)

%fn%(2)    <em>; Shows "1, 2"</em>
fn.Call(3) <em>; Shows "1, 3"</em>

RealFn(a, b) {
    MsgBox("%a%, %b%")
}</pre>
<p><a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a> can be used to bind to a method when it isn't possible to retrieve a reference to the method itself.  For example:</p>
<pre>file := FileOpen(A_ScriptFullPath, "r")
getLine := ObjBindMethod(file, "ReadLine")
MsgBox % %getLine%()  <em>; Shows the first line of this file.</em></pre>
<p>For a more complex example, see <a href="../commands/SetTimer.htm#ExampleClass">SetTimer</a>.</p>

</body>
</html>
