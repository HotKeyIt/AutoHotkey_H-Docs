<!DOCTYPE HTML>
<html>
<head>
<title>OnCommand()</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnCommand</h1>
<p>Registers a function or method to be called when a control notification is received via the <a href="https://msdn.microsoft.com/library/ms647591">WM_COMMAND</a> message.</p>
<pre class="Syntax">GuiControl.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove := 1</span>)</pre>

<h3>Parameters</h3>
<dl>
  <dt>GuiControl</dt>
  <dd><p>The <a href="GuiControl.htm">GuiControl</a> object of the control to monitor.</p></dd>
  
  <dt>NotifyCode</dt>
  <dd><p>The control-defined notification code to monitor.</p></dd>
  
  <dt>Callback</dt>
  <dd>
    <p>The function, method or object to call when the event is raised.</p>
    <p>If this parameter is a string, its meaning depends on whether the GUI has an <a href="../commands/GuiCreate.htm#EventObj">event sink</a> (that is, whether <a href="../commands/GuiCreate.htm">GuiCreate</a>'s <em>EventObj</em> parameter was specified). If the GUI has an event sink, the string must be the name of a method belonging to the event sink; otherwise, it must be the name of a function.</p>
    <p>To register a function regardless of whether the GUI has an event sink, pass a <a href="Func.htm">function reference</a>.</p>
  </dd>
  
  <dt>AddRemove</dt>
  <dd>
    <p>One of the following values:<br>
    <strong>1</strong> (the default): Call the callback after any previously registered callbacks.<br>
    <strong>-1</strong>: Call the callback before any previously registered callbacks.<br>
    <strong>0</strong>: Do not call the callback.</p>
  </dd>
</dl>

<h2 id="WM_COMMAND">WM_COMMAND</h2>
<p>Certain types of controls send a <a href="https://msdn.microsoft.com/library/ms647591">WM_COMMAND</a> message whenever an interesting event occurs. These are usually standard Windows controls which have been around a long time, as newer controls use the WM_NOTIFY message (see <a href="GuiOnNotify.htm">OnNotify</a>). Commonly used notification codes are translated to events, which the script can monitor with <a href="GuiOnEvent.htm">OnEvent</a>.</p>
<p>The message's parameters contain the control ID, HWND and notification code, which AutoHotkey uses to dispatch the notification to the appropriate callback. There are no additional parameters.</p>
<p>To determine which notifications are available (if any), refer to the control's documentation. <a href="https://msdn.microsoft.com/library/bb773169">Control Library (MSDN)</a> contains links to each of the the Windows common controls (however, only a few of these use WM_COMMAND). The notification codes (numbers) can be found in the Windows SDK, or by searching the Internet.</p>

<h2 id="Callback_Parameters">Callback Parameters</h2>
<p>The <a href="GuiOnEvent.htm#Callback_Parameters">notes for OnEvent</a> regarding <code>this</code> and bound functions also apply to OnCommand.</p>
<p>The callback receives one parameter:</p>
<pre class="Syntax"><i>Callback</i>(GuiControl)</pre>

<h2 id="Callback_Return_Value">Callback Return Value</h2>
<p>If multiple callbacks have been registered for an event, a callback may return a non-empty value to prevent any remaining callbacks from being called.</p>
<p>The return value is ignored by the control.</p>

<h2 id="Related">Related</h2>
<p>These notes for <a href="GuiOnEvent.htm">OnEvent</a> also apply to OnCommand: <a href="GuiOnEvent.htm#Threads">Threads</a>, <a href="GuiOnEvent.htm#Destroying_the_GUI">Destroying the GUI</a>.</p>
<p><a href="GuiOnNotify.htm">OnNotify</a> can be used for notifications which are sent as a WM_NOTIFY message.</p>

</body>
</html>
