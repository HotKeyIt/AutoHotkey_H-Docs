<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Object</h1>

<p>AutoHotkey's basic object datatype is an associative array with features which allow its behaviour to be <a href="../Objects.htm#Custom_Objects">customized</a>.  By default, all objects created by <code>{}</code>, <code>[]</code>, <code>Object()</code> and <code>Array()</code> support the following methods and functions:</p>
<ul>
	<li><a href="#Clone">Clone</a></li>
	<li><a href="#GetCapacity">GetCapacity</a></li>
	<li><a href="#GetAddress">GetAddress</a></li>
	<li><a href="#HasKey">HasKey</a></li>
	<li><a href="#InsertAt">InsertAt</a></li>
	<li><a href="#Length">Length</a></li>
	<li><a href="#NewEnum">_NewEnum</a></li>
	<li><a href="#Pop">Pop</a></li>
	<li><a href="#Push">Push</a></li>
	<li><a href="#Remove">Remove</a></li>
	<li><a href="#RemoveAt">RemoveAt</a></li>
	<li><a href="#SetCapacity">SetCapacity</a></li>
	<li><a href="#RawSet">ObjRawSet</a> (function)</li>
</ul>
<p>Each method also has an equivalent function, which can be used to bypass any <a href="../Objects.htm#Custom_Objects">custom behaviour</a> implemented by the object -- it is recommended that these functions only be used for that purpose.  To call one, prefix the method name with "Obj" (but for _NewEnum, omit the underscore) and pass the target object as the first parameter.  For example:</p>
<pre>array := [1, 2, 3]
MsgBox % ObjLength(array) " = " array.Length()</pre>

&nbsp;

<div class="methodShort" id="Remove"><h2>Remove</h2>
<p>Removes key-value pairs from an object.</p>
<pre class="Syntax" style="margin-top:15px">Object.Remove(Key)</pre>
<table class="info">
  <tr><td width="15%">Key</td><td width="85%">Any valid key.</td></tr>
  <tr><td><strong>Returns</strong></td><td>The value which was removed, if any; otherwise an empty string.</td></tr>
</table>
<pre class="Syntax">Object.Remove(FirstKey, LastKey)</pre>
<table class="info">
  <tr><td width="15%">FirstKey, LastKey</td><td width="85%">A range of integer or string keys to remove.  Both keys must be the same type (integer or string).</td></tr>
  <tr><td><strong>Returns</strong></td><td>The actual number of key-value pairs which were removed.</td></tr>
</table>
</div>

<div class="methodShort" id="InsertAt"><h2>InsertAt</h2>
<p>Inserts values into an array.</p>
<pre class="Syntax">Object.InsertAt(Index, Value [, Value2, ... Value<i>N</i> ])</pre>
<table class="info">
  <tr><td width="15%">Index</td><td width="85%">The index to insert the first value at. Subsequent values are inserted at Index+1, Index+2, etc.  This parameter must be an integer.</td></tr>
  <tr><td>Value</td><td>A string, number or object.</td></tr>
</table>
<h3>Remarks</h3>
<p>This method should only be used when each integer key within the object represents a position with an array. Elements previously stored in the array have their keys adjusted as necessary to reflect their new positions within the array.</p>
<p>A parameter can be omitted to leave the corresponding element unassigned. For example:</p>
<pre>x := [3]
x.InsertAt(1,,2)
MsgBox % x[1] "," x[2] "," x[3]  <em>; ,2,3</em></pre>
<p>There is no return value. If the method fails for any reason, an exception is thrown.</p>
</div>

<div class="methodShort" id="RemoveAt"><h2>RemoveAt</h2>
<p>Removes elements from an array.</p>
<pre class="Syntax" style="margin-top:15px">Object.RemoveAt(Index)</pre>
<table class="info">
  <tr><td width="15%">Index</td><td width="85%">The index (integer key) of the element to remove.</td></tr>
  <tr><td><strong>Returns</strong></td><td>The value which was removed, if any; otherwise an empty string.</td></tr>
</table>
<pre class="Syntax">Object.RemoveAt(Index, VirtualCount)</pre>
<table class="info">
  <tr><td width="15%">Index</td><td width="85%">The index (integer key) of the first element to remove.</td></tr>
  <tr><td>VirtualCount</td><td>The number of elements to remove. The index of the last element to be removed is always <code>Index + VirtualCount - 1</code>, even for sparse arrays (where some elements are left unassigned).</td></tr>
  <tr><td><strong>Returns</strong></td><td>The actual number of key-value pairs which were removed.</td></tr>
</table>
<h3>Remarks</h3>
<p>This method should only be used when each integer key within the object represents a position with an array. The remaining elements have their keys adjusted as necessary to reflect their new positions within the array.</p>
</div>

<div class="methodShort" id="Push"><h2>Push</h2>
<p>Appends values to the end of an array.</p>
<pre class="Syntax">Object.Push([ Value, Value2, ..., Value<i>N</i> ])</pre>
<table class="info">
  <tr><td width="15%">Value</td><td width="85%">A string, number or object.</td></tr>
  <tr><td><strong>Returns</strong></td><td>The new <a href="#Length">array length</a>. Can be negative if the array only contained elements at negative indices.</td></tr>
</table>
<h3>Remarks</h3>
<p>The first value is inserted at index <code>Object.Length() + 1</code>, so index 1 if the array is empty.</p>
<p>A parameter can be omitted to leave the corresponding element unassigned. For example:</p>
<pre>x := []
x.Push(1,, 3)
MsgBox % x[1] "," x[2] "," x[3]  <em>; 1,,3</em></pre>
</div>

<div class="methodShort" id="Pop"><h2>Pop</h2>
<p>Removes and returns the last array element.</p>
<pre class="Syntax">Value := Object.Pop()</pre>
<p>If there are no array elements, the return value is an empty string. Otherwise, it is equivalent to the following:</p>
<pre>Value := Object.RemoveAt(Object.Length())</pre>
</div>

<div class="methodShort" id="Length"><h2>Length</h2>
<pre class="Syntax">Length := Object.Length()
Length := Object.Length</pre>
<p>Returns the array's length; that is, the highest integer key contained by the object, or 0 if there aren't any.</p></div>

<div class="methodShort" id="SetCapacity"><h2>SetCapacity</h2>
<p>Adjusts the capacity of an object or one of its fields.</p>
<pre class="Syntax">Object.SetCapacity(MaxItems)
Object.SetCapacity(Key, ByteSize)</pre>
<table class="info">
  <tr><td width="15%">MaxItems</td><td width="85%">The maximum number of key-value pairs the object should be able to contain before it must be automatically expanded.  If less than the current number of key-value pairs, that number is used instead, and any unused space is freed.</td></tr>
  <tr><td>Key</td><td>Any valid key.</td></tr>
  <tr><td>ByteSize</td><td>The new size in bytes of the field's string buffer, excluding the null-terminator.  If the field does not exist, it is created.  If <i>ByteSize</i> is zero, the buffer is freed but the empty field is not removed.  If <i>ByteSize</i> is less than the current size, excess data is truncated; otherwise all existing data is preserved.</td></tr>
  <tr><td><strong>Returns</strong></td><td>The new capacity. No return value is reserved to indicate failure; an exception is thrown in that case.</td></tr>
</table></div>

<div class="methodShort" id="GetCapacity"><h2>GetCapacity</h2>
<pre class="Syntax">MaxItems := Object.GetCapacity()
ByteSize := Object.GetCapacity(Key)</pre>
<p>Returns the current capacity of an object or one of its fields.</p></div>

<div class="methodShort" id="GetAddress"><h2>GetAddress</h2>
<pre class="Syntax">Ptr := Object.GetAddress(Key)</pre>
<p>Returns the current address of the field's string buffer, if it has one.</p></div>

<div class="methodShort" id="NewEnum"><h2>_NewEnum</h2>
<pre class="Syntax">Enum := Object._NewEnum()</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a> to enumerate this object's key-value pairs. This method is usually not called directly, but by the <a href="../commands/For.htm">for-loop</a>.</p></div>

<div class="methodShort" id="HasKey"><h2>HasKey</h2>
<pre class="Syntax">Object.HasKey(Key)</pre>
<p>Returns true if <i>Key</i> is associated with a value (even "") within <i>Object</i>, otherwise false.</p></div>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<pre class="Syntax">Clone := Object.Clone([From, To])</pre>
<table class="info">
  <tr><td width="15%">From (optional)</td><td width="85%">The lowest key (integer or string) to include in cloned object. When this parameter is missing all strings and integers lower than To will be included.</td></tr>
  <tr><td>To (optional)</td><td>The highest key to include in cloned object.When this parameter is missing all integers and strings higher than From will be included.</td></tr>
</table>
<p>Note, the order of From integers To strings.</p>
<pre>obj:={1:1,2:2,3:3,4:4,5:5,test:"test",ahk:"ahk",var:"var",(""):"empty",([]):"object"}
for k,v in obj.Clone(,obj.Length()) ; clone all integer keys
  out1.=k "=" v "`n"
MsgBox % out1
for k,v in obj.Clone("") ; clone all string keys
  out2.=k "=" v "`n"
MsgBox % out2
for k,v in obj.Clone("t","x") ; only string keys from t - x
  out3.=k "=" v "`n"
MsgBox % out3
for k,v in obj.Clone(2,4) ; only integer keys from 2,4
  out4.=k "=" v "`n"
MsgBox % out4
for k,v in obj.Clone() ; clone all
  out4.=k "=" v "`n"
MsgBox % out4</pre></div>

<div class="methodShort" id="RawSet"><h2>ObjRawSet</h2>
<p>Stores or overwrites a key-value pair in the object.</p>
<pre class="Syntax">ObjRawSet(Object, Key, Value)</pre>
<p>This function is provided to allow scripts to bypass the __Set <a href="../Objects.htm#Meta_Functions">meta-function</a>. If that isn't required, a normal assignment should be used instead. For example: <code>Object[Key] := Value</code></p>
<p>Since the purpose is to bypass meta-functions, this is a function only, not a method. Calling a built-in method generally causes the __Call meta-function to be called.</p></div>

</body>
</html>
