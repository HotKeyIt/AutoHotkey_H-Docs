<!DOCTYPE HTML>
<html>
<head>
<title>On-Screen Keyboard</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>On-Screen Keyboard <span class="headnote">Based on the v1 script by Jon</span></h1>

<p>This script creates a mock keyboard at the bottom of your screen that shows
 the keys you are pressing in real time. I made it to help me to learn to
 touch-type (to get used to not looking at the keyboard).  The size of the
 on-screen keyboard can be customized at the top of the script. Also, you
 can double-click the tray icon to show or hide the keyboard.
</p>
<p><a href="KeyboardOnScreen.ahk">Download This Script</a> &nbsp;| &nbsp;<a href="index.htm">Other Sample Scripts</a> &nbsp;| &nbsp;<a href="../AutoHotkey.htm">Home</a></p>

<pre class="NoIndent"><em>;---- Configuration Section: Customize the size of the on-screen keyboard and
; other options here.</em>

<em>; Changing this font size will make the entire on-screen keyboard get
; larger or smaller:</em>
k_FontSize := 10
k_FontName := "Verdana"  <em>; This can be blank to use the system's default font.</em>
k_FontStyle := "Bold"    <em>; Example of an alternative: Italic Underline</em>

<em>; Names for the tray menu items:</em>
k_MenuItemHide := "Hide on-screen &keyboard"
k_MenuItemShow := "Show on-screen &keyboard"

<em>; To have the keyboard appear on a monitor other than the primary, specify
; a number such as 2 for the following variable.  Leave it blank to use
; the primary:</em>
k_Monitor := ""

<em>;---- End of configuration section.  Don't change anything below this point
; unless you want to alter the basic nature of the script.</em>

<em>;---- Create a GUI window for the on-screen keyboard:</em>
Gui := GuiCreate("-Caption +ToolWindow +AlwaysOnTop +Disabled")
Gui.SetFont("s%k_FontSize% %k_FontStyle%", k_FontName)
Gui.MarginY := 0, Gui.MarginX := 0

<em>;---- Alter the tray icon menu:</em>
fn := Func("k_ShowHide").bind(Gui, k_MenuItemHide, k_MenuItemShow)
Menu("Tray", "Add", k_MenuItemHide, fn)
Menu("Tray", "Add", "&amp;Exit", "k_MenuExit")
Menu("Tray", "Default", k_MenuItemHide)
Menu("Tray", "NoStandard")

<em>;---- Add a button for each key:</em>

<em>; The keyboard layout you see:</em>
k_cL := [ ["``", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "Back "]
        , ["Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\  "]
        , ["Caps", "A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'", "Enter"]
        , ["Shift", "Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "Shift  "]
        , ["Ctrl", "Win", "Alt", "Space ", "Alt", "Win", "Menu", "Ctrl"] ]

<em>; AutoHotkey's official key names for the keys above (leave empty if identical):</em>
k_oL := [ [, , , , , , , , , , , , , "Backspace"]
        , []
        , ["CapsLock"]
        , ["LShift", , , , , , , , , , , "RShift"]
        , ["LCtrl", "LWin", "LAlt", , "RAlt", "RWin", "AppsKey", "RCtrl"] ]

<em>; Traverse each key in the list of custom key names:</em>
For n, k_Row in k_cL
  For i, k_CustomKeyName in k_Row
  {
    k_OfficialKeyName := k_oL[n][i]
    <em>; Calculate object dimensions based on chosen font size:</em>
    opt := "h" k_FontSize * 3 " w" k_FontSize * (StrLen(k_CustomKeyName) + 2) " x+m" 
    if i = 1
      opt .= " y+m xm"
    <em>; When a key is pressed by the user, click the corresponding button on-screen:</em>
    fn := Func("k_KeyPress").bind(Gui.Add("Button", opt, k_CustomKeyName))
    <em>; If the key has an official key name use it:</em>
    if k_OfficialKeyName
      Hotkey("~*" k_OfficialKeyName, fn)
    else
      Hotkey("~*" Trim(k_CustomKeyName), fn)
  }

<em>;---- Position the keyboard at the bottom of the screen (taking into account
; the position of the taskbar):</em>
Gui.Show("Hide") <em>; Required to get the window's calculated width and height.
; Calculate window's X-position:</em>
MonitorGetWorkArea(k_Monitor, WL,, WR, WB)
k_xPos := (WR - WL - Gui.Pos.W) / 2 <em>; Calculate position to center it horizontally.
; The following is done in case the window will be on a non-primary monitor
; or if the taskbar is anchored on the left side of the screen:</em>
k_xPos += WL
<em>; Calculate window's Y-position:</em>
k_yPos := WB - Gui.Pos.H

<em>;---- Show the window:</em>
Gui.Show("x" k_xPos " y" k_yPos " NA")

<em>;---- Function definitions:</em>
k_KeyPress(BtnCtrl)
{ 
  BtnCtrl.Opt("Default") <em>; Highlight the last pressed key.</em>
  ControlClick(, "ahk_id %BtnCtrl.Hwnd%",,,, "D")
  KeyWait(SubStr(A_ThisHotkey, 3))
  ControlClick(, "ahk_id %BtnCtrl.Hwnd%",,,, "U")
}

k_ShowHide(GuiObj, HideText, ShowText)
{
  static isVisible := true
  if isVisible
  {
    GuiObj.Hide()
    Menu("Tray", "Rename", HideText, ShowText)
    isVisible := false
  }
  else
  {
    GuiObj.Show()
    Menu("Tray", "Rename", ShowText, HideText)
    isVisible := true
  }
}

k_MenuExit()
{
  ExitApp()
}
</pre>
</body>
</html>
